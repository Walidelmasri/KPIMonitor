@{
    ViewData["Title"] = "RedBoard";
}
<style>
    /* subtle alert tint for RedBoard */
    .alert-tint {
        background: #fff5f5 !important;
        /* very light red */
        border-color: #f8d7da !important;
        /* soft red border */
        box-shadow: 0 2px 8px rgba(220, 53, 69, .10) !important;
    }

    .alert-tint .card-title,
    .alert-tint h6 {
        color: #842029;
    }
</style>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2"></script>
    <script>
        // ---------------------------
        // Helpers
        // ---------------------------
        const $ = (id) => document.getElementById(id);
        const qs = (sel, root = document) => root.querySelector(sel);
        const qsa = (sel, root = document) => Array.from(root.querySelectorAll(sel));

        // Antiforgery token (we render it below in a hidden form)
        const anti = () => (qs('input[name="__RequestVerificationToken"]')?.value || '');

        // Simple GET (expects JSON)
        const getJSON = (url) => fetch(url, { headers: { 'Accept': 'application/json' } }).then(r => r.json());

        // Simple GET (expects HTML)
        const getHTML = (url) => fetch(url, { headers: { 'Accept': 'text/html' } }).then(r => r.text());

        // Simple POST (form submit via fetch, following redirects)
        async function postForm(url, form) {
            const fd = new FormData(form);
            // ensure antiforgery
            if (!fd.get('__RequestVerificationToken')) fd.append('__RequestVerificationToken', anti());
            const res = await fetch(url, {
                method: 'POST',
                body: fd,
                headers: {
                    'Accept': 'text/html',
                    'X-Requested-With': 'XMLHttpRequest'
                }
            });
            // treat any 200 as success; we don't navigate away
            if (!res.ok) throw new Error('Save failed');
            return res.text();
        }

        // ---------------------------
        // Slide deck state
        // ---------------------------
        let redList = [];   // [{kpiId, name, code, priority}]
        let deck = [];      // same as your logic (title + kpi slides)
        let idx = 0;
        let kpiChart;
        let currentKpiId = null;

        // also keep list of kpiIds for the "Decisions" board
        let runKpiIds = [];
        // number formatter (same as Home)
        function _fmtShort(v) {
            const n = Number(v); if (!isFinite(n)) return '';
            const a = Math.abs(n);
            if (a >= 1e9) return (n / 1e9).toFixed(1).replace(/\.0$/, '') + 'B';
            if (a >= 1e6) return (n / 1e6).toFixed(1).replace(/\.0$/, '') + 'M';
            if (a >= 1e3) return (n / 1e3).toFixed(1).replace(/\.0$/, '') + 'K';
            return n.toString();
        }

        // === SmartValueLabels (same as Home) ===
        const SmartValueLabels = {
            id: 'smartValueLabels',
            afterDatasetsDraw(chart, _args, opts) {
                const { ctx, data, chartArea } = chart;
                const o = opts || {};
                const fmt = typeof o.formatter === 'function' ? o.formatter : (v) => String(v);

                const fontSize = o.fontSize || 12;
                const fontWeight = o.fontWeight || '700';
                const minGap = o.minGap || 14;
                const padTop = o.padTop || 4;
                const padBottom = o.padBottom || 4;
                const maxShift = o.maxShift || 40;

                const barDY = (o.barDY != null ? o.barDY : -12);
                const barDYNeg = (o.barDYNeg != null ? o.barDYNeg : 14);
                const lineDY = (o.lineDY != null ? o.lineDY : -12);

                const perDataset = o.perDataset || [];
                const lineStepDefault = o.lineStep || 1;
                const onlyLastForLinesDefault = !!o.onlyLastForLines;

                ctx.save();
                ctx.textAlign = 'center';
                ctx.textBaseline = 'bottom';
                ctx.font = `${fontWeight} ${fontSize}px system-ui,-apple-system,Segoe UI,Roboto,Arial`;

                const byIndex = new Map();

                data.datasets.forEach((ds, di) => {
                    if (!chart.isDatasetVisible(di)) return;
                    const meta = chart.getDatasetMeta(di);
                    const type = ds.type || meta.type;
                    const isBar = type === 'bar';
                    const isLine = type === 'line';
                    const per = perDataset[di] || {};
                    const step = Number.isInteger(per.step) ? Math.max(1, per.step) : lineStepDefault;

                    let lastIdxForThisLine = null;
                    if (isLine && (onlyLastForLinesDefault || per.onlyLast)) {
                        for (let i = ds.data.length - 1; i >= 0; i--) {
                            const v = ds.data[i];
                            if (v != null && !Number.isNaN(+v)) { lastIdxForThisLine = i; break; }
                        }
                    }

                    meta.data.forEach((el, i) => {
                        const raw = ds.data[i];
                        const val = Number(raw);
                        if (raw == null || Number.isNaN(val)) return;

                        if (isLine) {
                            if ((onlyLastForLinesDefault || per.onlyLast) && i !== lastIdxForThisLine) return;
                            if ((i % step) !== 0) return;
                        }

                        const { x, y } = el.getProps(['x', 'y'], true);
                        let dy = isBar ? (val < 0 ? barDYNeg : barDY) : lineDY;
                        if (typeof per.dy === 'number') dy = per.dy;
                        const dx = (typeof per.dx === 'number') ? per.dx : 0;

                        const text = fmt(val);
                        const w = ctx.measureText(text).width;
                        const h = fontSize * 1.2;

                        const item = {
                            x: x + dx, y: y + dy, baseY: y + dy,
                            val, text, color: per.color || o.color || '#111',
                            w, h, priority: isBar ? 0 : 1
                        };
                        const arr = byIndex.get(i);
                        if (arr) arr.push(item); else byIndex.set(i, [item]);
                    });
                });

                const topLimitBase = chartArea.top + padTop;
                const botLimit = chartArea.bottom - padBottom;

                byIndex.forEach((items) => {
                    const clampNearBase = (it) => {
                        const topLimit = topLimitBase + it.h;
                        if (it.y < topLimit) it.y = topLimit;
                        const low = it.baseY - maxShift;
                        const high = it.baseY + maxShift;
                        if (it.y < low) it.y = low;
                        if (it.y > high) it.y = high;
                        if (it.y > botLimit) it.y = botLimit;
                    };

                    items.forEach(it => { it.y = it.baseY; clampNearBase(it); });

                    let guard = 0;
                    while (guard++ < 10) {
                        let changed = false;
                        for (let i = 0; i < items.length; i++) {
                            for (let j = i + 1; j < items.length; j++) {
                                const a = items[i], b = items[j];
                                const aL = a.x - a.w / 2, aR = a.x + a.w / 2, aT = a.y - a.h, aB = a.y;
                                const bL = b.x - b.w / 2, bR = b.x + b.w / 2, bT = b.y - b.h, bB = b.y;
                                const overlap = !(aR < bL || aL > bR || aB < bT || aT > bB);
                                if (overlap) {
                                    const hi = (a.val >= b.val) ? a : b;
                                    const lo = (hi === a) ? b : a;
                                    hi.y -= minGap;                    // bigger value up
                                    lo.y += Math.min(4, minGap / 2);     // smaller down a touch
                                    clampNearBase(hi); clampNearBase(lo);
                                    changed = true;
                                }
                            }
                        }
                        if (!changed) break;
                    }

                    items.sort((a, b) => a.priority - b.priority);
                    items.forEach(it => {
                        ctx.fillStyle = it.color;
                        if (o.outline) { ctx.lineWidth = 3; ctx.strokeStyle = 'rgba(255,255,255,0.95)'; ctx.strokeText(it.text, it.x, it.y); }
                        ctx.fillText(it.text, it.x, it.y);
                    });
                });

                ctx.restore();
            }
        };
        Chart.register(SmartValueLabels);
        Chart.register(ChartDataLabels); // we keep datalabels OFF per chart options

        // ---------------------------
        // Load red list + build deck (UNCHANGED logic)
        // ---------------------------
        async function loadRedList() {
            redList = await getJSON('@Url.Action("GetRedKpiIds", "RedBoard")');
            // Update "red KPIs" count badge (one-time per load)
            const badge = $('redCountBadge');
            if (badge) {
                const n = Array.isArray(redList) ? redList.length : 0;
                badge.textContent = n;
                badge.classList.toggle('d-none', n === 0);
            }

            if (!redList || redList.length === 0) {
                $('emptyMsg').classList.remove('d-none');
                $('slideWrap').classList.add('d-none');
                return;
            }
            $('emptyMsg').classList.add('d-none');
            $('slideWrap').classList.remove('d-none');

            // build deck by your grouping logic
            const groups = new Map();
            for (const k of redList) {
                const key = k.priority ?? 999999; // nulls to end
                if (!groups.has(key)) groups.set(key, []);
                groups.get(key).push(k);
            }
            const orderedPriorities = Array.from(groups.keys()).sort((a, b) => a - b);

            deck = [];
            runKpiIds = [];
            for (const p of orderedPriorities) {
                const items = groups.get(p);
                deck.push({ type: 'title', priority: p === 999999 ? '—' : p, count: items.length });
                for (const k of items) {
                    deck.push({ type: 'kpi', ...k });
                    runKpiIds.push(k.kpiId);
                }
            }
            deck.push({ type: 'decisions' });
            idx = 0;
            await showCurrent();
        }

        // ---------------------------
        // Show current slide 
        // ---------------------------
        async function showCurrent() {
            const slide = deck[idx];
            $('slideCounter').innerText = `${idx + 1} / ${deck.length}`;
            // Always hide the decisions area unless we're on that slide
            $('decisionsWrap').classList.add('d-none');
            const isLast = (idx === deck.length - 1);
            const isFirst = (idx === 0);
            $('btnFirst') && ($('btnFirst').disabled = isFirst);
            $('btnLast') && ($('btnLast').disabled = isLast);
            // NEW: decisions slide
            if (slide.type === 'decisions') {
                // hide title/kpi areas and actions block
                $('titleSlide').classList.add('d-none');
                $('kpiSlide').classList.add('d-none');
                $('actionsBlock').classList.add('d-none');

                // show the decisions section and load it using your existing function
                await showDecisions();
                return;
            }

            if (slide.type === 'title') {
                // header for group
                $('kpiHeading').innerText = `Priority ${slide.priority}`;
                $('kpiSub').innerText = `${slide.count} KPI${slide.count === 1 ? '' : 's'} Need Attention`;

                const tp = $('titlePriority');
                tp.textContent = slide.priority;

                $('titleSlide').classList.remove('d-none');
                $('kpiSlide').classList.add('d-none');
                $('actionsBlock').classList.add('d-none');
                return;
            }

            // KPI slide
            $('titleSlide').classList.add('d-none');
            $('kpiSlide').classList.remove('d-none');
            $('actionsBlock').classList.remove('d-none');

            currentKpiId = slide.kpiId;
            $('kpiHeading').innerText = `KPI Name: ${slide.name}`;
            $('kpiSub').innerText = `${slide.code}`;
            $('btnAddAction').disabled = false;

            const data = await getJSON('@Url.Action("GetKpiPresentation", "RedBoard")?kpiId=' + slide.kpiId);

            // meta
            $('m_owner').innerText = data?.meta?.owner ?? '—';
            $('m_editor').innerText = data?.meta?.editor ?? '—';
            $('m_frequency').innerText = data?.meta?.valueType ?? '—';
            $('m_unit').innerText = data?.meta?.unit ?? '—';
            $('m_priority').innerText = data?.meta?.priority ?? '—';

            const status = $('m_status');
            status.innerText = data?.meta?.statusLabel ?? '—';
            status.style.background = data?.meta?.statusColor ?? '';
            status.className = 'status-pill';

            // chart
            const baseLabels = data?.chart?.labels || [];
            const act = data?.chart?.actual || [];
            const tgt = data?.chart?.target || [];
            const fct = data?.chart?.forecast || [];
            const yrs = Array.isArray(data?.chart?.yearTargets) ? data.chart.yearTargets : [];
            const yearLabels = yrs.map(y => String(y.year));
            const yearVals = yrs.map(y => y.value ?? null);

            const allLabels = baseLabels.concat(yearLabels);
            const pad = new Array(yearLabels.length).fill(null);
            const leftNulls = new Array(baseLabels.length).fill(null);

            const chartData = {
                labels: allLabels,
                datasets: [
                    // In chartData.datasets on RedBoard
                    { // Actual
                        type: 'bar',
                        label: 'Actual',
                        data: act.concat(pad),
                        backgroundColor: '#800080',   // <- solid like Home
                        borderColor: '#800080',
                        borderWidth: 2,
                        borderSkipped: 'bottom'
                    },
                    { // Target (already #7a7a7a)
                        type: 'line',
                        label: 'Target',
                        data: tgt.concat(pad),
                        borderColor: '#7a7a7a',
                        pointBackgroundColor: '#7a7a7a',
                        pointBorderColor: '#7a7a7a',
                        borderWidth: 2,
                        tension: .3,
                        fill: false
                    },
                    { // Forecast (already #fd7e14)
                        type: 'line',
                        label: 'Forecast',
                        data: fct.concat(pad),
                        borderColor: '#fd7e14',
                        pointBackgroundColor: '#fd7e14',
                        pointBorderColor: '#fd7e14',
                        borderDash: [5, 5],
                        borderWidth: 2,
                        tension: .3,
                        fill: false
                    },
                    { // Year Target
                        type: 'bar',
                        label: 'Year Target',
                        data: leftNulls.concat(yearVals),
                        backgroundColor: '#7a7a7a',   // <- solid like Home
                        borderColor: '#7a7a7a',
                        borderWidth: 1
                    }

                ]
            };

            if (!kpiChart) {
                kpiChart = new Chart($('rbChart').getContext('2d'), {
                    data: chartData,
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        layout: { padding: { top: 28, bottom: 8 } },
                        scales: {
                            x: {
                                grid: { display: false },
                                ticks: {
                                    padding: 8,
                                    callback: function (value) {
                                        const label = this.getLabelForValue(value);
                                        // Strip leading "YYYY – " so monthly/quarter labels read nicely
                                        return String(label).replace(/^\s*\d{4}\s*[\-–—]\s*/, '');
                                    }
                                }
                            },
                            y: { display: false, grid: { display: false }, beginAtZero: true }
                        },
                        plugins: {
                            datalabels: false,               // keep built-in datalabels OFF for this chart
                            smartValueLabels: {
                                formatter: _fmtShort,
                                fontSize: 12,
                                fontWeight: '700',
                                minGap: 14,
                                padTop: 12,
                                padBottom: 4,
                                outline: true,
                                // dataset order: Actual(bar), Target(line), Forecast(line), Year Target(bar)
                                perDataset: [
                                    { dy: -12, dx: 0, color: '#800080' }, // Actual
                                    { dy: 12, dx: -8, color: '#7a7a7a' }, // Target (below)
                                    { dy: -16, dx: 8, color: '#fd7e14' }, // Forecast (above/right)
                                    { dy: -12, dx: 0, color: '#7a7a7a' }  // Year Target
                                ]
                            },
                            tooltip: { enabled: true },
                            legend: {
                                position: 'top',
                                labels: { boxWidth: 12, boxHeight: 10, padding: 12, font: { size: 8, weight: '700' } }
                            }
                        }
                    }

                });
            } else {
                kpiChart.data = chartData;
                kpiChart.update();
            }

            // Load actions list (HTML) for this KPI
            await loadActionsHtml(slide.kpiId);
        }

        window.prevSlide = async () => { if (!deck.length) return; idx = (idx - 1 + deck.length) % deck.length; await showCurrent(); }
        window.nextSlide = async () => { if (!deck.length) return; idx = (idx + 1) % deck.length; await showCurrent(); }
        window.firstSlide = async () => { if (!deck.length) return; idx = 0; await showCurrent(); }
        window.lastSlide = async () => { if (!deck.length) return; idx = deck.length - 1; await showCurrent(); }
        // ---------------------------
        // Actions Block (HTML fetch)
        // ---------------------------
        async function loadActionsHtml(kpiId) {
            $('actionsList').innerHTML = "<div class='text-muted small'>Loading…</div>";
            try {
                const html = await getHTML('@Url.Action("ActionsListHtml", "RedBoard")?kpiId=' + encodeURIComponent(kpiId));
                $('actionsList').innerHTML = html;
            } catch {
                $('actionsList').innerHTML = "<div class='text-danger small'>Failed to load actions.</div>";
            }
        }

        // Delegate clicks inside actionsList for Move Deadline + Set Status
        document.addEventListener('click', async (e) => {
            const btn = e.target.closest('[data-action]');
            if (!btn) return;

            const act = btn.getAttribute('data-action');
            if (act === 'move-deadline') {
                const id = btn.getAttribute('data-id');
                openMoveDeadline(id);
            }
        });

        // Delegate change for status dropdowns
        document.addEventListener('change', async (e) => {
            const sel = e.target.closest('select[data-action="set-status"]');
            if (!sel) return;
            const id = sel.getAttribute('data-id');
            const val = sel.value;
            try {
                const form = new FormData();
                form.append('__RequestVerificationToken', anti());
                form.append('actionId', id);
                form.append('statusCode', val);
                const res = await fetch('@Url.Action("SetStatus", "KpiActions")', {
                    method: 'POST',
                    body: form,
                    headers: { 'Accept': 'text/html', 'X-Requested-With': 'XMLHttpRequest' }
                });
                if (!res.ok) throw 0;
                await loadActionsHtml(currentKpiId);
            } catch { alert('Failed to update status.'); }
        });

        // ---------------------------
        // Add Action Modal
        // ---------------------------
        function openAddAction() {
            if (!currentKpiId) return;
            $('af_kpiId').value = currentKpiId;
            $('af_owner').value = '';
            $('af_description').value = '';
            $('af_due').value = '';
            $('af_status').value = 'todo';
            const m = new bootstrap.Modal(document.getElementById('addActionModal'));
            m.show();
        }

        async function submitAddAction(ev) {
            ev.preventDefault();
            try {
                const url = isGeneralCreate
                    ? '@Url.Action("CreateGeneral", "KpiActions")'
                    : '@Url.Action("Create", "KpiActions")';

                await postForm(url, $('addActionForm'));
                bootstrap.Modal.getInstance(document.getElementById('addActionModal')).hide();

                // reset the flag after a successful save
                isGeneralCreate = false;

                // refresh current KPI actions list (general actions won't show here, which is fine)
                await loadActionsHtml(currentKpiId);
            } catch {
                alert('Save failed.');
            }
        }


        // ---------------------------
        // Move Deadline Modal
        // ---------------------------
        function openMoveDeadline(actionId) {
            $('md_actionId').value = actionId;
            $('md_reason').value = '';
            $('md_due').value = '';
            const m = new bootstrap.Modal(document.getElementById('moveDeadlineModal'));
            m.show();
        }

        async function submitMoveDeadline(ev) {
            ev.preventDefault();
            try {
                await postForm('@Url.Action("MoveDeadline", "KpiActions")', $('moveDeadlineForm'));
                bootstrap.Modal.getInstance(document.getElementById('moveDeadlineModal')).hide();
                await loadActionsHtml(currentKpiId);
            } catch {
                alert('Failed to move deadline (check max 3 extensions).');
            }
        }

        // ---------------------------
        // Decisions Board (HTML fetch)
        // ---------------------------
        async function showDecisions() {
            if (!runKpiIds.length) return;
            $('decisionsWrap').classList.remove('d-none');
            $('decisionsBody').innerHTML = "<div class='text-muted small'>Loading…</div>";
            try {
                const res = await fetch('@Url.Action("DecisionsBoardHtml", "RedBoard")', {
                    method: 'POST',
                    headers: {
                        'Accept': 'text/html',
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': anti()
                    },
                    body: JSON.stringify(runKpiIds)
                });
                if (!res.ok) throw 0;
                $('decisionsBody').innerHTML = await res.text();
                $('decisionsWrap').scrollIntoView({ behavior: 'smooth', block: 'start' });
            } catch {
                $('decisionsBody').innerHTML = "<div class='text-danger small'>Failed to load decisions.</div>";
            }
        }

        // ---------------------------
        // Boot
        // ---------------------------
        document.addEventListener('DOMContentLoaded', () => loadRedList());
        window.submitAddAction = submitAddAction;
        window.submitMoveDeadline = submitMoveDeadline;
        window.openAddAction = openAddAction;
        window.openMoveDeadline = openMoveDeadline;
        window.showDecisions = showDecisions;

        let isGeneralCreate = false;

        document.addEventListener('DOMContentLoaded', () => {
            const btnGeneral = document.getElementById('btnAddGeneralAction');
            if (btnGeneral) {
                btnGeneral.addEventListener('click', () => {
                    isGeneralCreate = true;

                    // reuse your existing Add Action modal + fields
                    $('af_kpiId').value = '';       // ensure no KPI id goes up
                    $('af_owner').value = '';
                    $('af_description').value = '';
                    $('af_due').value = '';
                    $('af_status').value = 'todo';

                    const m = new bootstrap.Modal(document.getElementById('addActionModal'));
                    m.show();
                });
            }
        });


        // On submit, branch the URL (keep your existing submit code, just add this one switch)
        $('#actionForm').on('submit', function (e) {
            e.preventDefault();

            // Build form data exactly like you do today (DON'T include KpiId for general)
            const formData = $(this).serialize();

            const url = isGeneralCreate
                ? '/KpiActions/CreateGeneral'
                : '/KpiActions/Create';

            $.ajax({
                url: url,
                method: 'POST',
                data: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    // if you already add the anti-forgery token via header or hidden input, keep doing that
                }
            }).done(function () {
                // whatever you do today after "OK"
                // e.g., refresh the list or append a new card
                $('#actionModal').modal('hide');

                // Optional: mark card as General when you render it (see step 3)
                reloadActionsOrAppendNewOne();
            }).fail(function (xhr) {
                alert(xhr.responseText || 'Error creating general action');
            }).always(function () {
                isGeneralCreate = false;
                $('#kpiSelectorRow').show(); // restore for next time
            });
        });

    </script>
}

<div class="container py-4">
    @section PageHeader {
        <div class="page-hero" style="background-image:url('@Url.Content("~/images/pic1.jpg")')">
            <div class="page-hero-content">
                <h1 class="page-title">RedBoard</h1>
            </div>
        </div>
    }
    <div class="with-rails">
        <!-- hidden antiforgery to reuse in JS -->
        <form id="af" method="post" class="d-none">
            @Html.AntiForgeryToken()
        </form>

        <div id="emptyMsg" class="alert alert-secondary rounded-4 d-none">
            No KPIs are currently marked <strong>Écart (red)</strong>.
        </div>

        <div id="slideWrap" class="d-none">
            <!-- Slide header: title + nav + Add Action + Decisions -->
            <div class="d-flex justify-content-between align-items-center mb-3">
                <div class="me-2">
                    <div class="h4 mb-0 fw-bold" id="kpiHeading">—</div>
                    <div class="text-muted" id="kpiSub" style="white-space:pre-line;">—</div>
                </div>

                <div class="d-flex align-items-center gap-2">
                    <span class="text-muted" id="slideCounter">0 / 0</span>
                    <button id="redCountBadge" class="btn btn-danger d-none" type="button" disabled
                        title="Red KPIs">0</button>


                    <!-- NEW: First-slide button -->
                    <button id="btnFirst" class="btn btn-outline-secondary" type="button" onclick="firstSlide()"
                        title="Go to first slide">⏮</button>

                    <button class="btn btn-outline-secondary" type="button" onclick="prevSlide()">◀</button>
                    <button class="btn btn-outline-secondary" type="button" onclick="nextSlide()">▶</button>

                    <!-- NEW: Last-slide (decisions) button -->
                    <button id="btnLast" class="btn btn-outline-secondary" type="button" onclick="lastSlide()"
                        title="Go to decisions">⏭</button>

                </div>
            </div>

            <!-- Title slide (your group header) -->
            <div id="titleSlide" class="text-center py-5 d-none">
                <div class="bg-white border rounded shadow-sm p-5">
                    <div class="display-4 fw-bold mb-3">Priority</div>
                    <div class="display-1 fw-bolder" id="titlePriority"></div>
                    <div class="lead text-muted mt-3">Use the arrows to view KPIs in this priority.</div>
                </div>
            </div>

            <!-- KPI slide (UNCHANGED layout) -->
            <div id="kpiSlide">
                <div class="row g-4 mb-4">
                    <div class="col-md-9">
                        <div class="bg-white border rounded shadow-sm p-3 alert-tint" style="height:550px;">
                            <canvas id="rbChart" role="img" aria-label="KPI Chart"></canvas>
                        </div>
                    </div>
                    <div class="col-md-3 d-flex">
                        <div class="card shadow-sm rounded-3 w-100">
                            <div class="card-body d-flex flex-column justify-content-between h-100">
                                <div>
                                    <h6 class="card-title text-secondary fw-bold mb-3">KPI Details</h6>
                                    <p class="mb-2" style="font-size: larger;">
                                        <strong>👁️ Owner:</strong> <span id="m_owner" class="text-dark">—</span>
                                    </p>
                                    <p class="mb-2" style="font-size: larger;">
                                        <strong>✍️ Editor:</strong> <span id="m_editor" class="text-dark">—</span>
                                    </p>
                                    <p class="mb-2" style="font-size: larger;">
                                        <strong>📅 Frequency:</strong> <span id="m_frequency" class="text-dark">—</span>
                                    </p>
                                    <p class="mb-2" style="font-size: larger;">
                                        <strong>🔢 Unit:</strong> <span id="m_unit" class="text-dark">—</span>
                                    </p>
                                </div>
                                <div class="mt-auto">
                                    <div class="mb-4 text-center">
                                        <div class="text-muted">Priority</div>
                                        <div id="m_priority" class="display-6 fw-bold text-dark">—</div>
                                    </div>
                                    <div class="text-center">
                                        <div class="text-muted mb-1">Status</div>
                                        <span id="m_status" class="status-pill">—</span>
                                    </div>
                                    <div class="text-center mt-3">
                                        <button id="btnAddAction" class="btn btn-primary" type="button"
                                            onclick="openAddAction()" disabled>
                                            ➕ Add Action
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div> <!-- /col -->
                </div> <!-- /row -->
            </div> <!-- /kpiSlide -->

            <!-- Actions block (HTML injected) -->
            <div id="actionsBlock" class="mt-3 d-none">
                <div class="bg-white border rounded-3 p-3">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <h6 class="mb-0 text-secondary fw-bold">Actions for this KPI</h6>
                    </div>
                    <div id="actionsList"></div>
                </div>
            </div>

            <!-- Decisions board (HTML injected when requested) -->
            <div id="decisionsWrap" class="mt-4 d-none">
                <div class="bg-white border rounded-3 p-3">
                    <div class="d-flex align-items-center justify-content-between mb-3">
                        <h5 class="mb-0">Decisions</h5>
                        <button id="btnAddGeneralAction" type="button" class="btn btn-primary btn-sm">
                            Add General Action
                        </button>
                    </div>
                    <div id="decisionsBody"></div>
                </div>
            </div>

        </div>

    </div>

    <!-- Add Action Modal -->
    <div class="modal fade" id="addActionModal" tabindex="-1" aria-labelledby="addActionLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content rounded-3">
                <div class="modal-header">
                    <h5 class="modal-title" id="addActionLabel">Add Action</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="addActionForm" method="post" onsubmit="submitAddAction(event)">
                    @Html.AntiForgeryToken()
                    <div class="modal-body">
                        <input type="hidden" name="KpiId" id="af_kpiId" />
                        <div class="mb-3">
                            <label class="form-label">Owner</label>
                            <input class="form-control" name="Owner" id="af_owner" required />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Assigned At</label>
                            <input type="datetime-local" class="form-control" name="AssignedAt" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Action</label>
                            <textarea class="form-control" name="Description" id="af_description" rows="3"
                                required></textarea>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Due Date</label>
                            <input type="datetime-local" class="form-control" name="DueDate" id="af_due" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Status</label>
                            <select class="form-select" name="StatusCode" id="af_status">
                                <option value="todo">To Do</option>
                                <option value="inprogress">In Progress</option>
                                <option value="done">Done</option>
                            </select>
                        </div>
                        <input type="hidden" name="ExtensionCount" value="0" />
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Save Action</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Move Deadline Modal -->
    <div class="modal fade" id="moveDeadlineModal" tabindex="-1" aria-labelledby="moveDeadlineLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content rounded-3">
                <div class="modal-header">
                    <h5 class="modal-title" id="moveDeadlineLabel">Move Deadline</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="moveDeadlineForm" method="post" onsubmit="submitMoveDeadline(event)">
                    @Html.AntiForgeryToken()
                    <div class="modal-body">
                        <input type="hidden" name="actionId" id="md_actionId" />
                        <div class="mb-3">
                            <label class="form-label">New Due Date</label>
                            <input type="datetime-local" class="form-control" name="newDueDate" id="md_due" required />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Reason (optional)</label>
                            <textarea class="form-control" name="reason" id="md_reason" rows="2"></textarea>
                        </div>
                        <div class="text-muted small">Max 3 extensions enforced.</div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Move</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>