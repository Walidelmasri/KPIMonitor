@model IEnumerable<KPIMonitor.Models.AuditLog>
@{
    ViewData["Title"] = "Audit Trail";
    string ActionBadge(string? action)
    {
        switch ((action ?? "").ToUpperInvariant())
        {
            case "INSERT": return "text-bg-success";
            case "UPDATE":
            case "MODIFIED": return "text-bg-warning";
            case "DELETE": return "text-bg-danger";
            default: return "text-bg-secondary";
        }
    }
}

<div class="container py-5">
    @section PageHeader {
        <div class="page-hero" style="background-image:url('@Url.Content("~/images/pic1.jpg")')">
            <div class="page-hero-content">
                <h1 class="page-title">üìù Audit Trail</h1>
            </div>
        </div>
    }

    <div class="with-rails">
        <div class="table-responsive shadow-sm rounded-4 border bg-white">
            <table class="table table-striped table-bordered mb-0 align-middle">
                <thead class="table-light">
                    <tr>
                        <th style="width:170px;">Time</th>
                        <th style="width:160px;">User</th>
                        <th style="width:160px;">Table</th>
                        <th style="width:110px;">Action</th>
                        <th style="width:260px;">Key</th>
                        <th>Changes</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model != null && Model.Any())
                    {
                        foreach (var r in Model)
                        {
                            <tr>
                                <td>
                                    <span class="audit-when"
                                          title="@r.ChangedAtUtc.ToString("yyyy-MM-dd HH:mm:ss") UTC"
                                          data-utc="@r.ChangedAtUtc.ToString("o")">
                                    </span>
                                </td>
                                <td>@(string.IsNullOrWhiteSpace(r.ChangedBy) ? "system" : r.ChangedBy)</td>
                                <td>@r.TableName</td>
                                <td>
                                    <span class="badge rounded-pill @ActionBadge(r.Action)">
                                        @((r.Action ?? "‚Äî").ToUpperInvariant())
                                    </span>
                                </td>
                                <td>
                                    <div class="small text-muted" data-key='@r.KeyJson'></div>
                                </td>
                                <td>
                                    <details class="audit-details"
                                             data-url="@Url.Action("Changes", new { id = r.AuditId })">
                                        <summary class="fw-semibold cursor-pointer">Details</summary>
                                        <div class="mt-2 text-muted small">Click to load‚Ä¶</div>
                                    </details>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="6" class="text-center text-muted py-4">No audit entries yet.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        @* --- PAGER (Prev/Next, no COUNT) --- *@
        @{
            var pg       = ViewBag.Page     as int? ?? 1;    
            var pageSize = ViewBag.PageSize as int? ?? 10;
            var hasNext  = ViewBag.HasNext  as bool? ?? false;
        }

        @if (Model != null && Model.Any())
        {
            <div class="d-flex justify-content-between align-items-center mt-3 flex-wrap gap-2">
                <div class="text-muted small">
                    Page @(pg) ¬∑ Page size @(pageSize)
                </div>

                <nav aria-label="Audit pagination">
                    <ul class="pagination mb-0">
                        <li class="page-item @(pg == 1 ? "disabled" : "")">
                            <a class="page-link"
                               href="@Url.Action("Index", new { page = pg - 1, pageSize })">Prev</a>
                        </li>
                        <li class="page-item @(hasNext ? "" : "disabled")">
                            <a class="page-link"
                               href="@Url.Action("Index", new { page = pg + 1, pageSize })">Next</a>
                        </li>
                    </ul>
                </nav>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        (function () {
            // ---- local time from UTC ISO string ----
            const fmt = new Intl.DateTimeFormat(undefined, {
                year: 'numeric', month: '2-digit', day: '2-digit',
                hour: '2-digit', minute: '2-digit', second: '2-digit'
            });
            document.querySelectorAll('.audit-when[data-utc]').forEach(el => {
                const iso = el.getAttribute('data-utc');
                const d = new Date(iso);
                el.textContent = isNaN(d) ? '‚Äî' : fmt.format(d);
            });

            // ---- helpers ----
            const decodeHtml = (s) => {
                const t = document.createElement('textarea');
                t.innerHTML = s ?? '';
                return t.value || '';
            };
            const safeJson = (s) => {
                try { return JSON.parse(s); } catch { return null; }
            };
            const clip = (v, max = 64) => {
                if (v == null) return '‚àÖ';
                const str = String(v);
                return str.length > max ? str.slice(0, max) + '‚Ä¶' : str;
            };

            // ---- Render key object like: KpiFactId=336, KpiId=12
            document.querySelectorAll('[data-key]').forEach(el => {
                const raw = decodeHtml(el.getAttribute('data-key') ?? '');
                const obj = safeJson(raw);
                if (!obj || typeof obj !== 'object') { el.textContent = '‚Äî'; return; }
                const parts = [];
                for (const k of Object.keys(obj)) parts.push(`${k}=${clip(obj[k], 32)}`);
                el.textContent = parts.length ? parts.join(', ') : '‚Äî';
            });

            // ---- Lazy-load "Changes" JSON on first open ----
            function makeRow(label, value) {
                const r = document.createElement('div');
                const b = document.createElement('strong');
                b.textContent = label + ': ';
                const span = document.createElement('span');
                span.textContent = value == null ? '‚àÖ' : String(value);
                r.appendChild(b);
                r.appendChild(span);
                return r;
            }
            function makeHr() {
                const h = document.createElement('hr');
                h.className = 'my-2';
                return h;
            }
            async function loadDetails(detailsEl) {
                const url = detailsEl.getAttribute('data-url');
                const box = detailsEl.querySelector('div'); // the placeholder inside <details>
                box.textContent = 'Loading‚Ä¶';

                try {
                    const res = await fetch(url, { headers: { 'Accept': 'application/json' } });
                    if (!res.ok) throw new Error('HTTP ' + res.status);
                    const data = await res.json();

                    const frag = document.createDocumentFragment();

                    if (Array.isArray(data)) {
                        data.forEach(item => {
                            const col = item.Column ?? item.col ?? item.name ?? '?';
                            const oldVal = ('Old' in item) ? item.Old : (item.old ?? null);
                            const newVal = ('New' in item) ? item.New : (item.new ?? null);
                            frag.appendChild(makeRow('Column', col));
                            frag.appendChild(makeRow('Old Value', oldVal));
                            frag.appendChild(makeRow('New Value', newVal));
                            frag.appendChild(makeHr());
                        });
                    } else {
                        const pre = document.createElement('pre');
                        pre.className = 'mb-0';
                        pre.textContent = JSON.stringify(data, null, 2);
                        frag.appendChild(pre);
                    }

                    box.replaceChildren(frag);
                    detailsEl.dataset.loaded = '1';
                } catch (e) {
                    box.textContent = 'Failed to load details';
                    detailsEl.dataset.loaded = '0';
                }
            }

            document.querySelectorAll('.audit-details').forEach(d => {
                d.addEventListener('toggle', () => {
                    if (d.open && d.dataset.loaded !== '1') {
                        loadDetails(d);
                    }
                });
            });
        })();
    </script>
}
