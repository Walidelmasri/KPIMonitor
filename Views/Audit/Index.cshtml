@model IEnumerable<KPIMonitor.Models.AuditLog>
@{
    ViewData["Title"] = "Audit Trail";
    string ActionBadge(string? action)
    {
        switch ((action ?? "").ToUpperInvariant())
        {
            case "INSERT": return "text-bg-success";
            case "UPDATE":
            case "MODIFIED": return "text-bg-warning";
            case "DELETE": return "text-bg-danger";
            default: return "text-bg-secondary";
        }
    }
}

<div class="container py-5">
    @section PageHeader {
        <div class="page-hero" style="background-image:url('@Url.Content("~/images/pic1.jpg")')">
            <div class="page-hero-content">
                <h1 class="page-title">üìù Audit Trail</h1>
            </div>
        </div>
    }

    <div class="with-rails">
        <div class="table-responsive shadow-sm rounded-4 border bg-white">
            <table class="table table-striped table-bordered mb-0 align-middle">
                <thead class="table-light">
                    <tr>
                        <th style="width:170px;">Time</th>
                        <th style="width:160px;">User</th>
                        <th style="width:160px;">Table</th>
                        <th style="width:110px;">Action</th>
                        <th style="width:260px;">Key</th>
                        <th>Changes</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model != null && Model.Any())
                    {
                        foreach (var r in Model)
                        {
                            <tr>
                                <td>
                                    <span class="audit-when" title="@r.ChangedAtUtc.ToString("yyyy-MM-dd HH:mm:ss") UTC"
                                        data-utc="@r.ChangedAtUtc.ToString("o")">
                                    </span>
                                </td>
                                <td>@(string.IsNullOrWhiteSpace(r.ChangedBy) ? "system" : r.ChangedBy)</td>
                                <td>@r.TableName</td>
                                <td>
                                    <span class="badge rounded-pill @ActionBadge(r.Action)">
                                        @((r.Action ?? "‚Äî").ToUpperInvariant())
                                    </span>
                                </td>
                                <td>
                                    <div class="small text-muted" data-key='@r.KeyJson'></div>
                                </td>
                                <td>
                                    <div class="small" data-changes-raw='@r.ColumnChangesJson'></div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="6" class="text-center text-muted py-4">No audit entries yet.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        (function () {
            // ---- local time from UTC ISO string ----
            const fmt = new Intl.DateTimeFormat(undefined, {
                year: 'numeric', month: '2-digit', day: '2-digit',
                hour: '2-digit', minute: '2-digit', second: '2-digit'
            });
            document.querySelectorAll('.audit-when[data-utc]').forEach(el => {
                const iso = el.getAttribute('data-utc');
                const d = new Date(iso);
                el.textContent = isNaN(d) ? '‚Äî' : fmt.format(d);
            });

            // ---- helpers ----
            const decodeHtml = (s) => {
                const t = document.createElement('textarea');
                t.innerHTML = s ?? '';
                return t.value || '';
            };
            const safeJson = (s) => {
                try { return JSON.parse(s); } catch { return null; }
            };
            const clip = (v, max = 64) => {
                if (v == null) return '‚àÖ';
                const str = String(v);
                return str.length > max ? str.slice(0, max) + '‚Ä¶' : str;
            };

            // ---- Render key object like: KpiFactId=336, KpiId=12
            document.querySelectorAll('[data-key]').forEach(el => {
                const raw = decodeHtml(el.getAttribute('data-key') ?? '');
                const obj = safeJson(raw);
                if (!obj || typeof obj !== 'object') { el.textContent = '‚Äî'; return; }
                const parts = [];
                for (const k of Object.keys(obj)) parts.push(`${k}=${clip(obj[k], 32)}`);
                el.textContent = parts.length ? parts.join(', ') : '‚Äî';
            });

            // ---- Render raw "Changes" but with titles ----
            document.querySelectorAll('[data-changes-raw]').forEach(el => {
                const decoded = decodeHtml(el.getAttribute('data-changes-raw') ?? '');
                if (!decoded) { el.innerHTML = '<span class="text-muted">‚Äî</span>'; return; }

                const parsed = safeJson(decoded);

                // Build details element
                const details = document.createElement('details');
                details.className = 'border rounded-3 p-2 bg-light-subtle';

                const summary = document.createElement('summary');
                summary.textContent = 'Details';
                summary.className = 'fw-semibold cursor-pointer';
                details.appendChild(summary);

                const box = document.createElement('div');
                box.className = 'mt-2';

                if (Array.isArray(parsed)) {
                    parsed.forEach(item => {
                        const col = item.Column ?? item.col ?? item.name ?? '?';
                        const oldVal = ('Old' in item) ? item.Old : (item.old ?? null);
                        const newVal = ('New' in item) ? item.New : (item.new ?? null);

                        const row = document.createElement('div');
                        row.innerHTML =
                            `<div><strong>Column:</strong> ${col}</div>` +
                            `<div><strong>Old Value:</strong> ${oldVal ?? '‚àÖ'}</div>` +
                            `<div><strong>New Value:</strong> ${newVal ?? '‚àÖ'}</div>` +
                            `<hr class="my-2">`;
                        box.appendChild(row);
                    });
                } else {
                    // fallback: show raw JSON if not array
                    const pre = document.createElement('pre');
                    pre.className = 'mb-0';
                    pre.textContent = decoded;
                    box.appendChild(pre);
                }

                details.appendChild(box);
                el.replaceChildren(details);
            });
        })();
    </script>
}