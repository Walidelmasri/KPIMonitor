@model KPIMonitor.ViewModels.OwnerEditorEditVm
@* We’ll reuse OwnerEditorEditVm to avoid new files:
   - PlanId
   - OwnerEmpId / EditorEmpId
   - CurrentOwnerName / CurrentEditorName
   - Employees (EmpId/Label)
   We’ll bind extra fields (Frequency/Unit/AnnualTarget/Priority) as plain inputs
   and read them from Request.Form in the controller. *@

<div class="modal fade" id="planEditModal" tabindex="-1" aria-labelledby="peLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content rounded-3">
      <div class="modal-header">
        <h5 class="modal-title" id="peLabel">Edit KPI Year Plan</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>

      <form id="planEditForm" method="post">
        @Html.AntiForgeryToken()
        <input type="hidden" name="planId" value="@Model.PlanId" />

        <div class="modal-body">
          <div class="row g-3">
            <div class="col-md-6">
              <label class="form-label">Frequency</label>
              <input class="form-control" name="frequency" id="pe_frequency"
                     value="@(ViewBag.Frequency ?? "")" />
            </div>
            <div class="col-md-6">
              <label class="form-label">Unit</label>
              <input class="form-control" name="unit" id="pe_unit"
                     value="@(ViewBag.Unit ?? "")" />
            </div>

            <div class="col-md-6">
              <label class="form-label">Annual Target</label>
              <input type="number" step="0.001" class="form-control"
                     name="annualTarget" id="pe_target"
                     value="@(ViewBag.AnnualTargetText ?? "")" />
            </div>
            <div class="col-md-6">
              <label class="form-label">Priority</label>
              <input type="number" class="form-control"
                     name="priority" id="pe_priority"
                     value="@(ViewBag.PriorityText ?? "")" />
            </div>

            <div class="col-md-6">
              <label class="form-label">Owner</label>
              <select class="form-select" name="ownerEmpId" id="pe_owner">
                <option value="">— Select —</option>
                @foreach (var e in Model.Employees)
                {
                    var isSelected = Model.OwnerEmpId != null &&
                                     string.Equals(Model.OwnerEmpId, e.EmpId, System.StringComparison.OrdinalIgnoreCase);
                    <option value="@e.EmpId" selected="@(isSelected ? "selected" : null)">@e.Label</option>
                }
              </select>
              <div class="form-text">Current: @Model.CurrentOwnerName</div>
            </div>

            <div class="col-md-6">
              <label class="form-label">Editor</label>
              <select class="form-select" name="editorEmpId" id="pe_editor">
                <option value="">— Select —</option>
                @foreach (var e in Model.Employees)
                {
                    var isSelected = Model.EditorEmpId != null &&
                                     string.Equals(Model.EditorEmpId, e.EmpId, System.StringComparison.OrdinalIgnoreCase);
                    <option value="@e.EmpId" selected="@(isSelected ? "selected" : null)">@e.Label</option>
                }
              </select>
              <div class="form-text">Current: @Model.CurrentEditorName</div>
            </div>
          </div>
        </div>

        <div class="modal-footer">
          <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-primary">Save</button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
(() => {
  const form = document.getElementById('planEditForm');

  function getAntiToken() {
    const el = form.querySelector('input[name="__RequestVerificationToken"]');
    return el ? el.value : '';
  }

  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    const fd = new FormData(form);
    const planId = fd.get('planId');

    // DEBUG: dump outgoing form
    console.log('[EditPlan] SUBMIT -> planId=', planId);
    for (const [k,v] of fd.entries()) console.log('  ', k, '=', v);

    try {
      const res = await fetch('@Url.Action("UpdatePlan","KpiYearPlans")', {
        method: 'POST',
        body: fd,
        headers: {
          'X-Requested-With': 'XMLHttpRequest',
          'Accept': 'application/json',
          // belt & suspenders: header token too
          'RequestVerificationToken': getAntiToken()
        },
        credentials: 'same-origin'
      });

      console.log('[EditPlan] RESPONSE status=', res.status);

      if (!res.ok) {
        const txt = await res.text().catch(()=>'');
        console.error('[EditPlan] Non-OK response body:', txt);
        alert('Save failed: ' + (txt || res.status));
        return;
      }

      const data = await res.json().catch(() => ({}));
      console.log('[EditPlan] JSON:', data);

      // Close modal
      const m = bootstrap.Modal.getInstance(document.getElementById('planEditModal'));
      m && m.hide();

      // Update row cells inline using SERVER values (ensures NAME_ENG)
      const setText = (id, txt) => {
        const el = document.getElementById(id);
        if (el) el.textContent = (txt ?? '—');
      };

      setText(`target-${data.planId}`,   data.annualTargetText);
      setText(`priority-${data.planId}`, data.priorityText);
      setText(`ownerName-${data.planId}`,  data.owner);   // NAME_ENG from server
      setText(`editorName-${data.planId}`, data.editor);  // NAME_ENG from server

      // If you kept freq/unit spans, they’ll update; if not, it’s a no-op.
      setText(`freq-${data.planId}`,    data.frequency);
      setText(`unit-${data.planId}`,    data.unit);

      console.log('[EditPlan] Row updated for plan', data.planId);
    } catch (err) {
      console.error('[EditPlan] ERROR:', err);
      alert('Save failed. Check console for details.');
    }
  }, { once: true });
})();
</script>

