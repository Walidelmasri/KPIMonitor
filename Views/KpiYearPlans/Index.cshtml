@model IEnumerable<KPIMonitor.Models.KpiYearPlan>
@{
    ViewData["Title"] = "KPI Year Plans";
    var filterYear = ViewBag.FilterYear as int?;
    var currentPillarId = ViewBag.CurrentPillarId as decimal?;
}
@if (TempData["Msg"] is string msg)
{
    <div class="alert alert-success rounded-4 mx-3 mt-3">@msg</div>
}
<div class="container py-5">
    @section PageHeader {
        <div class="page-hero" style="background-image:url('@Url.Content("~/images/pic1.jpg")')">
            <div class="page-hero-content">
                <h1 class="page-title">ðŸ“… KPI Year Plans</h1>
            </div>
        </div>
    }
    <div class="with-rails">
        <!-- Filters row -->
        <div class="row g-2 align-items-center mb-3">
            <div class="col-auto">
                <form asp-action="Index" method="get" class="d-flex align-items-center gap-2 mb-0">
                    <div class="input-group" style="min-width: 220px; max-width: 220px;">
                        <input type="number"
                               name="year"
                               class="form-control"
                               placeholder="Filter by year (e.g., 2025)"
                               value="@(filterYear?.ToString() ?? "")" />
                        <button type="submit" class="btn btn-outline-secondary">Apply</button>
                    </div>

                    @Html.DropDownList(
                        "pillarId",
                        (SelectList)ViewBag.Pillars,
                        "All pillars",
                        new {
                            @class = "form-select",
                            style  = "min-width:260px",
                            onchange = "this.form.submit()"
                        }
                    )

                    @if (filterYear != null || ViewBag.CurrentPillarId != null)
                    {
                        <a class="btn btn-outline-secondary" href="@Url.Action("Index")">Reset</a>
                    }
                </form>
            </div>

            <div class="col ms-auto text-end">
                <a class="btn btn-primary rounded-4" asp-admin-only href="@Url.Action("Create")">âž• New Year Plan</a>
            </div>
        </div>

        <!-- Table (no horizontal scroll; compact columns) -->
        <table class="table table-striped table-bordered mb-0 align-middle bg-white shadow-sm rounded-4">
            <thead class="table-light">
                <tr>
                    <th>Year</th>
                    <th>KPI</th>
                    <th>Pillar</th>
                    <th>Objective</th>
                    <th>Owner</th>
                    <th>Editor</th>
                    <th>Annual Target</th>
                    <th>Priority</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (Model != null && Model.Any())
                {
                    foreach (var p in Model)
                    {
                        <tr>
                            <td>@(p.Period?.Year.ToString() ?? "â€”")</td>

                            <!-- KPI: show code â€” name -->
                            <td>@(p.Kpi != null ? $"{p.Kpi.KpiCode} â€” {p.Kpi.KpiName}" : p.KpiId.ToString())</td>

                            <!-- Codes only -->
                            <td>@(p.Kpi?.Pillar?.PillarCode ?? "â€”")</td>
                            <td>@(p.Kpi?.Objective?.ObjectiveCode ?? "â€”")</td>

                            <!-- Live-updated by modal save -->
                            <td><span id="ownerName-@p.KpiYearPlanId">@p.Owner</span></td>
                            <td><span id="editorName-@p.KpiYearPlanId">@p.Editor</span></td>

                            <td><span id="target-@p.KpiYearPlanId">@(p.AnnualTarget?.ToString("0.###") ?? "â€”")</span></td>
                            <td><span id="priority-@p.KpiYearPlanId">@(p.Priority?.ToString() ?? "â€”")</span></td>

                            <td>
                                <div class="btn-group">
                                    @if (p.IsActive == 1)
                                    {
                                        <a class="btn btn-sm btn-outline-warning rounded-3"
                                           href="@Url.Action("Deactivate", new { id = p.KpiYearPlanId })">Deactivate</a>
                                    }
                                    else
                                    {
                                        <a class="btn btn-sm btn-outline-success rounded-3"
                                           href="@Url.Action("Activate", new { id = p.KpiYearPlanId })">Activate</a>
                                    }

                                    <a class="btn btn-sm btn-outline-primary rounded-3 ms-1" asp-admin-only
                                       href="@Url.Action("Generate", "KpiFacts", new { kpiId = p.KpiId, planId = p.KpiYearPlanId })">
                                        Generate Facts
                                    </a>

                                    <button type="button"
                                            class="btn btn-sm btn-outline-primary rounded-3 ms-1" asp-admin-only
                                            onclick="openPlanEdit(@p.KpiYearPlanId)">
                                        Edit
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr><td colspan="9" class="text-center text-muted py-4">No year plans found.</td></tr>
                }
            </tbody>
        </table>

        <!-- Modal host (content loaded via AJAX) -->
        <div id="planEditHost"></div>
    </div>
</div>
@section Scripts {
<script>
async function openPlanEdit(id){
  const host = document.getElementById('planEditHost');

  // show a lightweight loading shell
  host.innerHTML = "<div class='modal fade show' style='display:block'><div class='modal-dialog'><div class='modal-content p-4 text-center'>Loadingâ€¦</div></div></div>";

  try {
    const url = '@Url.Action("EditModal","KpiYearPlans")?id=' + encodeURIComponent(id);
    console.log('[EditPlan] FETCH modal GET', url);

    const html = await fetch(url, { headers: { 'Accept': 'text/html' } })
      .then(r => {
        console.log('[EditPlan] Modal GET status', r.status);
        return r.text();
      });

    // inject modal HTML
    host.innerHTML = html;

    // show it
    const modalEl = document.getElementById('planEditModal');
    const modal = new bootstrap.Modal(modalEl);
    modal.show();

    // WIRE SUBMIT HANDLER HERE (dynamic content -> scripts in partial won't run)
    const form = document.getElementById('planEditForm');
    if (!form) {
      console.error('[EditPlan] planEditForm not found in DOM');
      return;
    }

    // helper to get anti-forgery token from the injected form
    const anti = () => (form.querySelector('input[name="__RequestVerificationToken"]')?.value || '');

    form.addEventListener('submit', async (e) => {
      e.preventDefault();

      const fd = new FormData(form);
      const planId = fd.get('planId');

      console.log('[EditPlan] SUBMIT -> planId=', planId);
      for (const [k,v] of fd.entries()) console.log('  ', k, '=', v);

      try {
        const postUrl = '@Url.Action("UpdatePlan","KpiYearPlans")';
        console.log('[EditPlan] POST', postUrl);

        const res = await fetch(postUrl, {
          method: 'POST',
          body: fd,
          headers: {
            'X-Requested-With': 'XMLHttpRequest',
            'Accept': 'application/json',
            'RequestVerificationToken': anti()
          },
          credentials: 'same-origin'
        });

        console.log('[EditPlan] POST status', res.status);

        if (!res.ok) {
          const txt = await res.text().catch(()=>'');
          console.error('[EditPlan] POST non-OK body:', txt);
          alert('Save failed: ' + (txt || res.status));
          return;
        }

        const data = await res.json().catch(() => ({}));
        console.log('[EditPlan] POST JSON', data);

        // Close modal
        modal.hide();

        // Update row inline using SERVER values (includes NAME_ENG)
        const setText = (id, txt) => {
          const el = document.getElementById(id);
          if (!el) {
            console.warn('[EditPlan] Missing element id=', id, 'â€” skip');
            return;
          }
          el.textContent = (txt ?? 'â€”');
        };

        // Required cells
        setText(`ownerName-${data.planId}`,  data.owner);   // NAME_ENG
        setText(`editorName-${data.planId}`, data.editor);  // NAME_ENG
        setText(`target-${data.planId}`,     data.annualTargetText);
        setText(`priority-${data.planId}`,   data.priorityText);

        // Optional: only updates if those IDs exist in your table
        setText(`freq-${data.planId}`,       data.frequency);
        setText(`unit-${data.planId}`,       data.unit);

        console.log('[EditPlan] Row updated for plan', data.planId);
      } catch (err) {
        console.error('[EditPlan] ERROR during POST', err);
        alert('Save failed. Check console for details.');
      }
    }, { once: true }); // avoid duplicate handlers if user reopens quickly

  } catch (err) {
    host.innerHTML = '';
    console.error('[EditPlan] ERROR loading modal', err);
    alert('Failed to load modal.');
  }
}
</script>
}
