@model KPIMonitor.Models.KpiYearPlan
@{
  ViewData["Title"] = "Create KPI Year Plan";
  var kpis = ViewBag.Kpis as Microsoft.AspNetCore.Mvc.Rendering.SelectList;
  var yearPeriods = ViewBag.YearPeriods as Microsoft.AspNetCore.Mvc.Rendering.SelectList;
}
<div class="container py-5">
  <div class="row justify-content-center">
    <div class="col-md-8">
      <div class="card shadow rounded-4">
        <div class="card-header bg-white border-bottom">
          <h4 class="mb-0 text-dark fw-bold">âž• New KPI Year Plan</h4>
        </div>
        <div class="card-body">
          <form asp-action="Create" method="post">
            @Html.AntiForgeryToken()
            @* <div asp-validation-summary="All" class="alert alert-danger rounded-4"></div> *@

<div class="row">
  <div class="col-md-4 mb-3">
    <label class="form-label fw-semibold">Pillar</label>
    <select id="c_pillar" class="form-select">
      <option value="">-- Select Pillar --</option>
    </select>
  </div>

  <div class="col-md-4 mb-3">
    <label class="form-label fw-semibold">Objective</label>
    <select id="c_objective" class="form-select" disabled>
      <option value="">-- Select Objective --</option>
    </select>
  </div>

  <div class="col-md-4 mb-3">
    <label class="form-label fw-semibold">KPI</label>
    <!-- bind the chosen KPI to your model -->
    <select asp-for="KpiId" id="c_kpi" class="form-select" disabled>
      <option value="">-- Select KPI --</option>
    </select>
    <span class="text-danger" asp-validation-for="KpiId"></span>
  </div>
</div>

            <div class="mb-3">
              <label class="form-label fw-semibold">Year (Period)</label>
              <select asp-for="PeriodId" class="form-select" asp-items="yearPeriods">
                <option value="">-- Select Year --</option>
              </select>
              <span class="text-danger" asp-validation-for="PeriodId"></span>
            </div>

<div class="row">
  <div class="col-md-6 mb-3">
    <label class="form-label fw-semibold">Frequency</label>
    <select asp-for="Frequency" class="form-select">
      <option value="">-- Select Frequency --</option>
      <option value="Monthly">Monthly</option>
      <option value="Quarterly">Quarterly</option>
    </select>
    <span class="text-danger" asp-validation-for="Frequency"></span>
  </div>

  <div class="col-md-3 mb-3">
    <label class="form-label fw-semibold">Priority</label>
    <select asp-for="Priority" class="form-select">
      <option value="">-- Select Priority --</option>
      <option value="1">1</option>
      <option value="2">2</option>
      <option value="3">3</option>
      <option value="4">4</option>
    </select>
    <span class="text-danger" asp-validation-for="Priority"></span>
  </div>

  <div class="col-md-3 mb-3">
    <label class="form-label fw-semibold">Status</label>
    <select asp-for="IsActive" class="form-select">
      <option value="1">Active</option>
      <option value="0">Deactivated</option>
    </select>
  </div>
</div>

            <!-- Unit on its own line to keep grid clean -->
            <div class="row">
              <div class="col-md-6 mb-3">
                <label class="form-label fw-semibold">Unit</label>
                <select asp-for="Unit" class="form-select">
                  <option value="">-- Select Unit --</option>
                  <option value="%">%</option>
                  <option value="$M">$M</option>
                  <option value="#">#</option>
                  <option value="# Days"># Days</option>
                  <option value="# Months"># Months</option>
                </select>
                <span class="text-danger" asp-validation-for="Unit"></span>
              </div>
            </div>

            <div class="row">
              <div class="col-md-6 mb-3">
                <label class="form-label fw-semibold">Annual Target</label>
                <input asp-for="AnnualTarget" type="number" step="0.001" class="form-control" />
              </div>
              <div class="col-md-6 mb-3">
                <label class="form-label fw-semibold">Annual Budget</label>
                <input asp-for="AnnualBudget" type="number" step="0.001" class="form-control" />
              </div>
            </div>

            <div class="row">
              <div class="col-md-6 mb-3">
                <label class="form-label fw-semibold">Owner</label>
                <input asp-for="Owner" class="form-control" maxlength="50" />
              </div>
              <div class="col-md-6 mb-3">
                <label class="form-label fw-semibold">Editor</label>
                <input asp-for="Editor" class="form-control" maxlength="50" />
              </div>
            </div>

            <div class="row">
              <div class="col-md-6 mb-3">
                <label class="form-label fw-semibold">Created By</label>
                <input asp-for="CreatedBy" class="form-control" maxlength="50" />
                <span class="text-danger" asp-validation-for="CreatedBy"></span>
              </div>
              <div class="col-md-6 mb-3">
                <label class="form-label fw-semibold">Last Changed By</label>
                <input asp-for="LastChangedBy" class="form-control" maxlength="50" />
                <span class="text-danger" asp-validation-for="LastChangedBy"></span>
              </div>
            </div>

            <div class="d-flex gap-2">
              <button type="submit" class="btn btn-primary btn-lg">ðŸ’¾ Save</button>
              <a class="btn btn-outline-secondary btn-lg" href="@Url.Action("Index")">Cancel</a>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

@section Scripts {
  @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }

  <script>
    // tiny helpers
    const $ = (id) => document.getElementById(id);
    const api = (url) => fetch(url, { headers: { 'Accept': 'application/json' } }).then(r => r.json());

    const selPillar = $('c_pillar');
    const selObjective = $('c_objective');
    const selKpi = $('c_kpi');

    function resetSelect(sel, placeholder, disable=true) {
      sel.innerHTML = '';
      const opt = document.createElement('option');
      opt.value = '';
      opt.textContent = placeholder;
      sel.appendChild(opt);
      sel.disabled = !!disable;
    }

    async function loadPillars() {
      resetSelect(selPillar, '-- Select Pillar --', false);
      resetSelect(selObjective, '-- Select Objective --');
      resetSelect(selKpi, '-- Select KPI --');

      const items = await api('@Url.Action("GetPillars", "Home")'); // [{id,name}]
      // order by code if your API isnâ€™t already
      items.sort((a,b) => a.name.localeCompare(b.name, undefined, {numeric:true}));
      for (const it of items) {
        const o = document.createElement('option');
        o.value = it.id; o.textContent = it.name;
        selPillar.appendChild(o);
      }
    }

    selPillar.addEventListener('change', async () => {
      resetSelect(selObjective, '-- Select Objective --');
      resetSelect(selKpi, '-- Select KPI --');

      const pid = selPillar.value;
      if (!pid) return;

      const items = await api('@Url.Action("GetObjectives", "Home")?pillarId=' + encodeURIComponent(pid));
      items.sort((a,b) => a.name.localeCompare(b.name, undefined, {numeric:true}));
      for (const it of items) {
        const o = document.createElement('option');
        o.value = it.id; o.textContent = it.name;
        selObjective.appendChild(o);
      }
      selObjective.disabled = items.length === 0;
    });

    selObjective.addEventListener('change', async () => {
      resetSelect(selKpi, '-- Select KPI --');

      const oid = selObjective.value;
      if (!oid) return;

      const items = await api('@Url.Action("GetKpis", "Home")?objectiveId=' + encodeURIComponent(oid));
      items.sort((a,b) => a.name.localeCompare(b.name, undefined, {numeric:true}));
      for (const it of items) {
        const o = document.createElement('option');
        o.value = it.id; o.textContent = it.name;
        selKpi.appendChild(o);
      }
      selKpi.disabled = items.length === 0;
    });

    // boot
    document.addEventListener('DOMContentLoaded', loadPillars);
  </script>
}