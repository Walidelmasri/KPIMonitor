@using KPIMonitor.Services
@inject IAdminAuthorizer AdminAuthorizer
@{
  ViewData["Title"] = "Action Plans";
  var isAdmin = AdminAuthorizer.IsAdmin(User);
}
<style>
  /* equal width buttons */
  .ap-action-btn { min-width: 140px; }

  /* optional: remove if you’re not using the old “badge” header */
  .ap-colbadge { font-size: 0.95rem; padding: .5rem .75rem; letter-spacing: .1px; }

  /* column wrapper (the controller outputs <div class="ap-col"> … ) */
  .ap-col { display: flex; flex-direction: column; gap: .75rem; }

  /* full-width column header bar */
  .ap-col-header { width: 100%; border-radius: .75rem; padding: .45rem .75rem; font-weight: 700; line-height: 1.2; }

  /* solid Bootstrap palette */
  .ap-col-header--todo  { background: #6c757d; color: #fff; }   /* secondary */
  .ap-col-header--prog  { background: #ffc107; color: #000; }   /* warning (black text for contrast) */
  .ap-col-header--done  { background: #198754; color: #fff; }   /* success */

  /* ensure no parent kills sticky */
  #apBody, #apBody .row, #apBody .col-md-4 { overflow: visible; }

  /* local scroller for the board */
  .ap-scroll {
    max-height: calc(100vh - 220px);
    overflow-y: auto;
    overflow-x: hidden;
    padding-right: 4px;
  }

  /* make column headers stick to top of the local scroller */
  @@media (min-width: 992px) {
    .ap-col-header { position: sticky; top: 0; z-index: 5; }
  }
</style>
<div class="container py-4">
  @section PageHeader {
    <div class="page-hero" style="background-image:url('@Url.Content("~/images/pic1.jpg")')">
      <div class="page-hero-content">
        <h1 class="page-title">Action Plans</h1>
      </div>
    </div>
  }
  <div class="with-rails">
    <!-- hidden antiforgery to reuse in JS -->
    <form id="af" method="post" class="d-none">
      @Html.AntiForgeryToken()
    </form>

    <div id="apBody" class="bg-white border rounded-3 p-3">
      <div class="text-muted small">Loading…</div>
    </div>
  </div>
</div>

<!-- Move Deadline Modal -->
<div class="modal fade" id="moveDeadlineModal" tabindex="-1" aria-labelledby="moveDeadlineLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content rounded-3">
      <div class="modal-header">
        <h5 class="modal-title" id="moveDeadlineLabel">Move Deadline</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form id="moveDeadlineForm" method="post">
        @Html.AntiForgeryToken()
        <div class="modal-body">
          <input type="hidden" name="actionId" id="md_actionId" />
          <div class="mb-3">
            <label class="form-label">New Due Date</label>
            <input type="datetime-local" class="form-control" name="newDueDate" id="md_due" required />
          </div>
          <div class="mb-3">
            <label class="form-label">Reason (optional)</label>
            <textarea class="form-control" name="reason" id="md_reason" rows="2"></textarea>
          </div>
          <div class="text-muted small">Max 3 Extensions.</div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-primary">Move</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Edit Plan Modal -->
<div class="modal fade" id="editPlanModal" tabindex="-1" aria-labelledby="editPlanLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content rounded-3">
      <div class="modal-header">
        <h5 class="modal-title" id="editPlanLabel">Edit Action Plan</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>

      <form id="editPlanForm" method="post">
        @Html.AntiForgeryToken()
        <div class="modal-body">
          <input type="hidden" name="actionId" id="ep_actionId" />

          <div class="mb-3">
            <label class="form-label">Owner</label>
            <input class="form-control" name="owner" id="ep_owner" required />
          </div>

          <div class="mb-3">
            <label class="form-label">Assigned At</label>
            <input type="datetime-local" class="form-control" name="assignedAt" id="ep_assignedAt" />
          </div>

          <div class="mb-3">
            <label class="form-label">Due Date</label>
            <input type="datetime-local" class="form-control" name="dueDate" id="ep_due" />
          </div>

          <div class="mb-3">
            <label class="form-label">Status</label>
            <select class="form-select" name="statusCode" id="ep_status">
              <option value="todo">To Do</option>
              <option value="inprogress">In Progress</option>
              <option value="done">Done</option>
            </select>
          </div>

          <div class="mb-3">
            <label class="form-label">Description</label>
            <textarea class="form-control" name="description" id="ep_desc" rows="3" required></textarea>
          </div>
        </div>

        <div class="modal-footer">
          <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-primary">Save</button>
        </div>
      </form>

    </div>
  </div>
</div>

@section Scripts {
  <script>
    const IS_ADMIN = @(isAdmin ? "true" : "false");
    const $ = (id) => document.getElementById(id);
    const qs = (sel, root = document) => root.querySelector(sel);
    const anti = () => (qs('input[name="__RequestVerificationToken"]')?.value || '');
    const getJSON = (url) => fetch(url, { headers: { 'Accept': 'application/json' } }).then(r => r.json());

    let apKpiIds = [];

    function stripAdminControls(){
      if (IS_ADMIN) return;
      const root = $('apBody');
      if (!root) return;

      // remove typical admin-only action buttons inside each card/row
      const selectors = [
        '[data-action="move-deadline"]',
        '[data-action="edit-plan"]',
        '[data-action="delete-action"]',
        '[data-action="close-action"]',
        '[data-admin-only]',
        '[asp-admin-only]'
      ];
      selectors.forEach(sel => {
        root.querySelectorAll(sel).forEach(n => n.remove());
      });

      // clean up any now-empty button groups/containers
      root.querySelectorAll('.btn-group, .ap-actions, .card-actions').forEach(group => {
        const hasVisibleChild = Array.from(group.children).some(ch => !!(ch.offsetParent));
        if (!hasVisibleChild || group.children.length === 0) {
          group.remove();
        }
      });
    }

    async function refreshBoard() {
      try {
        if (!apKpiIds.length) {
          const reds = await getJSON('@Url.Action("GetRedKpiIds", "RedBoard")');
          apKpiIds = (Array.isArray(reds) ? reds.map(x => x.kpiId) : []);
        }
        const res = await fetch('@Url.Action("BoardHtml", "ActionPlans")', {
          method: 'POST',
          headers: {
            'Accept': 'text/html',
            'Content-Type': 'application/json',
            'RequestVerificationToken': anti()
          },
          body: JSON.stringify(apKpiIds)
        });
        if (!res.ok) throw 0;
        $('apBody').innerHTML = "<div class='ap-scroll'>" + (await res.text()) + "</div>";

        // hide per-card admin controls for non-admins
        stripAdminControls();

      } catch {
        $('apBody').innerHTML = "<div class='text-danger small'>Failed to load actions.</div>";
      }
    }

    document.addEventListener('DOMContentLoaded', refreshBoard);

    // Move Deadline — open
    document.addEventListener('click', (e) => {
      const btn = e.target.closest('[data-action="move-deadline"]');
      if (!btn || !IS_ADMIN) return;
      $('md_actionId').value = btn.getAttribute('data-id');
      $('md_reason').value = '';
      $('md_due').value = '';
      new bootstrap.Modal(document.getElementById('moveDeadlineModal')).show();
    });

    // Move Deadline — submit
    document.getElementById('moveDeadlineForm').addEventListener('submit', async (ev) => {
      ev.preventDefault();
      if (!IS_ADMIN) return; // hard stop on client
      try {
        const fd = new FormData(ev.target);
        const res = await fetch('@Url.Action("MoveDeadline", "KpiActions")', {
          method: 'POST',
          body: fd,
          headers: { 'Accept': 'text/html', 'X-Requested-With': 'XMLHttpRequest' }
        });
        if (!res.ok) throw 0;
        bootstrap.Modal.getInstance(document.getElementById('moveDeadlineModal')).hide();
        await refreshBoard();
      } catch {
        alert('Failed to move deadline (check max 3 extensions).');
      }
    });

    // Edit Plan — open
    document.addEventListener('click', async (e) => {
      const btn = e.target.closest('[data-action="edit-plan"]');
      if (!btn || !IS_ADMIN) return;

      const id = btn.getAttribute('data-id');
      try {
        const data = await getJSON('@Url.Action("GetAction", "KpiActions")?actionId=' + encodeURIComponent(id));
        $('ep_actionId').value = data.actionId;
        $('ep_owner').value = data.owner || '';
        $('ep_desc').value = data.description || '';
        $('ep_status').value = data.statusCode || 'todo';
        $('ep_assignedAt').value = data.assignedAtLocal || '';
        $('ep_due').value = data.dueDateLocal || '';
        new bootstrap.Modal(document.getElementById('editPlanModal')).show();
      } catch {
        alert('Failed to load the action.');
      }
    });

    // Edit Plan — submit
    document.getElementById('editPlanForm').addEventListener('submit', async (ev) => {
      ev.preventDefault();
      if (!IS_ADMIN) return; // hard stop on client
      try {
        const fd = new FormData(ev.target);
        if (!fd.get('__RequestVerificationToken')) fd.append('__RequestVerificationToken', anti());
        const res = await fetch('@Url.Action("UpdateAction", "KpiActions")', {
          method: 'POST',
          body: fd,
          headers: { 'Accept': 'text/html', 'X-Requested-With': 'XMLHttpRequest' }
        });
        if (!res.ok) throw 0;
        bootstrap.Modal.getInstance(document.getElementById('editPlanModal')).hide();
        await refreshBoard();
      } catch {
        alert('Save failed.');
      }
    });
  </script>
}
