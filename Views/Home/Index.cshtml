@{
  ViewData["Title"] = "Dashboard";
}
<style>
  /* Make all data cells inherit the row's striped background */
  #factsTbody td {
    background-color: inherit !important;
  }
</style>

<div class="container py-4">
  @section PageHeader {
    <div class="page-hero" style="background-image:url('@Url.Content("~/images/pic1.jpg")')">
      <div class="page-hero-content">
        <h1 class="page-title">Dashboard</h1>
      </div>
    </div>
  }

  <!-- Selector row (one line) -->
  <div class="with-rails">
    <div class="card shadow-sm rounded-4 mb-4">
      <div class="card-body">
        <div class="row g-3 align-items-end">
          <div class="col-md-4">
            <label for="pillarSelector" class="form-label">Pillar</label>
            <select id="pillarSelector" class="form-select">
              <option value="">-- Pillar --</option>
            </select>
          </div>
          <div class="col-md-4">
            <label for="objectiveSelector" class="form-label">Objective</label>
            <select id="objectiveSelector" class="form-select" disabled>
              <option value="">-- Objective --</option>
            </select>
          </div>
          <div class="col-md-4">
            <label for="kpiSelector" class="form-label">KPI</label>
            <select id="kpiSelector" class="form-select" disabled>
              <option value="">-- KPI --</option>
            </select>
          </div>
        </div>
      </div>
    </div>

    <!-- Chart + side card -->
    <div class="row mb-5 g-4">
      <div class="col-md-9">
        <div class="bg-white border rounded shadow-sm p-3" style="height: 500px;">
          <h6 id="kpiTitle" class="text-center text-secondary mb-2">KPI Title</h6>
          <canvas id="kpiChart" aria-label="KPI Chart" role="img"></canvas>
        </div>
      </div>

      <div class="col-md-3 d-flex">
        <div class="card shadow-sm rounded-3 w-100 align-self-stretch">
          <div class="card-body d-flex flex-column justify-content-between h-100">
            <div>
              <h6 class="card-title text-secondary fw-bold mb-3">KPI Details</h6>
              <p class="mb-2" style="font-size: larger;"><strong>👁️ Owner:</strong> <span id="metaOwner"
                  class="text-dark">—</span></p>
              <p class="mb-2" style="font-size: larger;"><strong>✍️ Editor:</strong> <span id="metaEditor"
                  class="text-dark">—</span></p>
              <p class="mb-2" style="font-size: larger;"><strong>📅 Frequency:</strong> <span id="metaFrequency"
                  class="text-dark">—</span></p>
              <p class="mb-2" style="font-size: larger;"><strong>🔢 Unit:</strong> <span id="metaUnit"
                  class="text-dark">—</span></p>
            </div>
            <div class="mt-auto">
              <div class="mb-4 text-center">
                <div class="text-muted">Priority</div>
                <div id="metaPriority" class="display-6 fw-bold text-dark">—</div>
              </div>
              <div class="text-center">
                <div class="text-muted mb-1">Status</div>
                <span id="metaStatus" class="status-pill">—</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Data Table -->
    <div class="table-responsive shadow-sm rounded-4 mt-4">
      <table class="table table-striped table-bordered mb-0 align-middle" aria-describedby="dataTableCaption">
        <caption id="dataTableCaption">KPI Facts For the Selected Year Plan</caption>
        <thead class="table-light">
          <tr>
            <th>Period</th>
            <th>Start</th>
            <th>End</th>
            <th>Actual</th>
            <th>Target</th>
            <th>Forecast</th>
            <th>Edit</th>
          </tr>
        </thead>
        <tbody id="factsTbody">
          <tr>
            <td colspan="7" class="text-center text-muted">—</td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</div>

@* Edit KPI Fact Modal *@
<div class="modal fade" id="editFactModal" tabindex="-1" aria-labelledby="editFactLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content rounded-4">
      <div class="modal-header">
        <h5 class="modal-title" id="editFactLabel">✏️ Edit KPI Fact</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>

      <form asp-action="UpdateKpiFact" asp-controller="Home" method="post" id="editFactForm">
        @Html.AntiForgeryToken()
        <div class="modal-body">
          <div class="mb-2 text-muted" id="editFactPeriod">—</div>
          <div class="mb-3">
            <label for="editLastBy" class="form-label">Last edited by</label>
            <input type="text" class="form-control" id="editLastBy" name="LastChangedBy" value="">
          </div>
          <!-- primary key + context -->
          <input type="hidden" name="KpiFactId" id="editFactId" />
          <input type="hidden" id="editPillarId" name="PillarId" />
          <input type="hidden" id="editObjectiveId" name="ObjectiveId" />
          <input type="hidden" id="editKpiId" name="KpiId" />

          <div class="row g-3">
            <div class="col-md-3">
              <label class="form-label">Actual</label>
              <input type="number" step="0.001" class="form-control" name="ActualValue" id="editActual" />
            </div>
            <div class="col-md-3">
              <label class="form-label">Target</label>
              <input type="number" step="0.001" class="form-control" name="TargetValue" id="editTarget" />
            </div>
            <div class="col-md-3">
              <label class="form-label">Forecast</label>
              <input type="number" step="0.001" class="form-control" name="ForecastValue" id="editForecast" />
            </div>
            <div class="col-md-3">
              <label class="form-label">Status</label>
              <select class="form-select" name="StatusCode" id="editStatus">
                <option value="">—</option>
                <option value="conforme">Ok</option>
                <option value="rattrapage">Catching Up</option>
                <option value="ecart">Needs Attention</option>
                <option value="attente">Data Missing</option>
              </select>
            </div>
          </div>
          <div class="form-text mt-2">Leave a field empty to keep its current value.</div>
        </div>
        <div class="modal-footer">
          <button class="btn btn-secondary" type="button" data-bs-dismiss="modal">Cancel</button>
          <button class="btn btn-primary" type="submit">💾 Save</button>
        </div>
      </form>
    </div>
  </div>
</div>
@section Scripts {
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2"></script>
  <script>
    // ---- number formatter FIRST (used by defaults + chart) ----
    function _fmtShort(v) {
      const n = Number(v);
      if (!isFinite(n)) return '';
      const a = Math.abs(n);
      if (a >= 1e9) return (n / 1e9).toFixed(1).replace(/\.0$/, '') + 'B';
      if (a >= 1e6) return (n / 1e6).toFixed(1).replace(/\.0$/, '') + 'M';
      if (a >= 1e3) return (n / 1e3).toFixed(1).replace(/\.0$/, '') + 'K';
      return n.toString();
    }
    // --- Custom labels plugin with per-dataset overrides ---
    const ShowAllValues = {
      id: 'showAllValues',
      afterDatasetsDraw(chart, _args, opts) {
        const { ctx, data } = chart;
        const fmt = (opts && typeof opts.formatter === 'function') ? opts.formatter : _fmtShort;

        const barDY = opts?.barDY ?? -6;
        const barDYNeg = opts?.barDYNeg ?? 14;
        const lineDY = opts?.lineDY ?? -8;
        const minGap = opts?.minGap ?? 12;

        ctx.save();
        const baseFont = `${opts?.fontWeight ?? '700'} ${opts?.fontSize ?? 15}px system-ui,-apple-system,Segoe UI,Roboto,Arial`;
        ctx.textAlign = 'center';
        ctx.textBaseline = 'bottom';

        // anti-overlap per x-index
        const lastYByIndex = new Map();

        data.datasets.forEach((ds, di) => {
          if (!chart.isDatasetVisible(di)) return;
          const meta = chart.getDatasetMeta(di);
          const isBar = (ds.type || meta.type) === 'bar';
          const isLine = (ds.type || meta.type) === 'line';

          // Optional filters: only last/step for lines
          const onlyLastForLines = !!opts?.onlyLastForLines;
          const lineStep = Number.isInteger(opts?.lineStep) ? Math.max(1, opts.lineStep) : 1;
          const lastLineIdx = isLine && onlyLastForLines
            ? [...ds.data].map((v, i) => [v, i]).reverse().find(x => x[0] != null)?.[1]
            : null;

          const per = opts?.perDataset?.[di] || {};   // {dy, dx, color}

          meta.data.forEach((el, i) => {
            const raw = ds.data[i];
            const val = Number(raw);
            if (raw == null || Number.isNaN(val)) return;

            if (isLine && onlyLastForLines && i !== lastLineIdx) return;
            if (isLine && lineStep > 1 && (i % lineStep) !== 0) return;

            const { x, y } = el.getProps(['x', 'y'], true);

            // pick a base DY, then allow per-dataset override
            let dy = isBar ? (val < 0 ? barDYNeg : barDY) : lineDY;
            if (typeof per.dy === 'number') dy = per.dy;

            const dx = typeof per.dx === 'number' ? per.dx : 0;

            let labelY = y + dy;
            const labelX = x + dx;

            const lastY = lastYByIndex.get(i);
            if (lastY !== undefined && Math.abs(labelY - lastY) < minGap) {
              labelY = Math.min(labelY, lastY - minGap);
            }
            lastYByIndex.set(i, labelY);

            ctx.font = baseFont;
            ctx.fillStyle = per.color || opts?.color || '#111';

            if (opts?.outline) {
              ctx.lineWidth = 3;
              ctx.strokeStyle = 'rgba(255,255,255,0.95)';
              ctx.strokeText(fmt(val), labelX, labelY);
            }
            ctx.fillText(fmt(val), labelX, labelY);
          });
        });

        ctx.restore();
      }
    };
    Chart.register(ShowAllValues);



    // ---- register plugin + global defaults for labels ----
    Chart.register(ChartDataLabels);
    Chart.defaults.set('plugins.datalabels', {
      display: (ctx) => ctx.raw != null,   // show for all non-null values
      formatter: (v) => _fmtShort(v),
      anchor: 'end',
      align: 'end',
      offset: 2,
      clamp: true,
      clip: false,                          // allow slight overflow when y-axis hidden
      color: '#111',
      font: { weight: 'bold' }
    });

    // (kept even if unused)
    const _isLastNonNull = (arr, idx) => {
      for (let i = arr.length - 1; i >= 0; i--) {
        if (arr[i] != null && !Number.isNaN(arr[i])) return idx === i;
      }
      return false;
    };

    // ---------- tiny helpers ----------
    const $ = (id) => document.getElementById(id);
    const api = (path) =>
      fetch(path, { headers: { 'Accept': 'application/json' } })
        .then(r => { if (!r.ok) throw new Error('Network error'); return r.json(); });

    // ---------- elements ----------
    const selPillar = $('pillarSelector');
    const selObjective = $('objectiveSelector');
    const selKpi = $('kpiSelector');

    const metaOwner = $('metaOwner');
    const metaEditor = $('metaEditor');
    const metaFrequency = $('metaFrequency');
    const metaUnit = $('metaUnit');

    const metaPriority = $('metaPriority');
    const metaStatus = $('metaStatus');

    const tableBody = $('factsTbody');

    // NEW: ACL state
    let currentPlanId = null;
    let canEditFacts = false;

    function resetSelect(sel, placeholder) {
      sel.innerHTML = '';
      const opt = document.createElement('option');
      opt.value = '';
      opt.textContent = placeholder;
      sel.appendChild(opt);
      sel.disabled = true;
    }

    // ----- Edit Fact modal handlers -----
    window.openEditModal = function (btn) {
      const id = btn.getAttribute('data-fact-id');
      const period = btn.getAttribute('data-period') || '—';
      const actual = btn.getAttribute('data-actual') || '';
      const target = btn.getAttribute('data-target') || '';
      const forecast = btn.getAttribute('data-forecast') || '';
      const status = btn.getAttribute('data-status') || '';
      const lastBy = btn.getAttribute('data-lastby') || '';

      // selection IDs carried on the button
      const pId = btn.getAttribute('data-pillar-id') || '';
      const oId = btn.getAttribute('data-objective-id') || '';
      const kId = btn.getAttribute('data-kpi-id') || '';

      // fill the form fields
      $('editFactId').value = id;
      $('editFactPeriod').innerText = period;
      $('editActual').value = (actual === '—') ? '' : actual;
      $('editTarget').value = (target === '-') ? '' : target;
      $('editForecast').value = (forecast === '—') ? '' : forecast;
      $('editStatus').value = status;
      $('editLastBy').value = lastBy;

      // preserve current selections for (fallback) redirect or later use
      $('editPillarId').value = pId;
      $('editObjectiveId').value = oId;
      $('editKpiId').value = kId;

      // show modal
      new bootstrap.Modal(document.getElementById('editFactModal')).show();
    };

    // Intercept the modal form submit and do AJAX save
    (function () {
      const form = document.getElementById('editFactForm');
      form.addEventListener('submit', async (e) => {
        e.preventDefault();

        const url = form.getAttribute('action') || '@Url.Action("UpdateKpiFact", "Home")';
        const fd = new FormData(form); // includes __RequestVerificationToken

        try {
          const res = await fetch(url, {
            method: 'POST',
            headers: { 'X-Requested-With': 'XMLHttpRequest', 'Accept': 'application/json' },
            body: fd
          });
          if (!res.ok) throw new Error('Save failed');

          // Close modal
          bootstrap.Modal.getInstance(document.getElementById('editFactModal'))?.hide();

          // Refresh chart/table/meta for the already-selected KPI
          await loadKpiSummary();
        } catch (err) {
          alert('Could not save. ' + (err?.message || ''));
        }
      });
    })();

    // ---------- cascading dropdowns ----------
    async function loadPillars() {
      resetSelect(selPillar, '-- Pillar --');
      resetSelect(selObjective, '-- Objective --');
      resetSelect(selKpi, '-- KPI --');

      const items = await api('@Url.Action("GetPillars", "Home")'); // [{id, name}]
      for (const it of items) {
        const o = document.createElement('option');
        o.value = it.id; o.textContent = it.name;
        selPillar.appendChild(o);
      }
      selPillar.disabled = false;
    }

    selPillar.addEventListener('change', async () => {
      resetSelect(selObjective, '-- Objective --');
      resetSelect(selKpi, '-- KPI --');
      clearMeta();
      clearChartAndTable();

      const pid = selPillar.value;
      if (!pid) return;

      const items = await api('@Url.Action("GetObjectives", "Home")?pillarId=' + encodeURIComponent(pid));
      for (const it of items) {
        const o = document.createElement('option');
        o.value = it.id; o.textContent = it.name;
        selObjective.appendChild(o);
      }
      selObjective.disabled = items.length === 0;
    });

    selObjective.addEventListener('change', async () => {
      resetSelect(selKpi, '-- KPI --');
      clearMeta();
      clearChartAndTable();

      const oid = selObjective.value;
      if (!oid) return;

      const items = await api('@Url.Action("GetKpis", "Home")?objectiveId=' + encodeURIComponent(oid));
      for (const it of items) {
        const o = document.createElement('option');
        o.value = it.id; o.textContent = it.name;
        selKpi.appendChild(o);
      }
      selKpi.disabled = items.length === 0;
    });

    selKpi.addEventListener('change', () => {
      loadKpiSummary().catch(console.error);
    });

    function getQS(name) {
      const u = new URL(window.location.href);
      return u.searchParams.get(name);
    }

    async function initPage() {
      await loadPillars();

      const qP = getQS('pillarId');
      const qO = getQS('objectiveId');
      const qK = getQS('kpiId');

      if (qP) { selPillar.value = qP; selPillar.dispatchEvent(new Event('change')); }
      if (qO) {
        const waitObjectives = () => new Promise(r => setTimeout(r, 150));
        await waitObjectives(); selObjective.value = qO; selObjective.dispatchEvent(new Event('change'));
      }
      if (qK) {
        const waitKpis = () => new Promise(r => setTimeout(r, 150));
        await waitKpis(); selKpi.value = qK; selKpi.dispatchEvent(new Event('change'));
      }
    }

    // ---------- Chart.js ----------
    const ctx = document.getElementById('kpiChart').getContext('2d');
    let kpiChart = new Chart(ctx, {
      data: {
        labels: [],
        datasets: [
          { // Actual as bars (purple)
            type: 'bar',
            label: 'Actual',
            data: [],
            backgroundColor: '#800080',
            borderColor: '#800080',
            borderWidth: 2,
            borderSkipped: 'bottom'
          },
          { // Target as a flat gray line
            type: 'line',
            label: 'Target',
            data: [],
            borderWidth: 2,
            borderColor: '#7a7a7a',
            pointBackgroundColor: '#7a7a7a',
            pointBorderColor: '#7a7a7a',
            tension: 0.3,
            fill: false
          },
          { // Forecast as dashed orange line
            type: 'line',
            label: 'Forecast',
            data: [],
            borderWidth: 2,
            borderColor: '#fd7e14',
            pointBackgroundColor: '#fd7e14',
            pointBorderColor: '#fd7e14',
            borderDash: [5, 5],
            tension: 0.3,
            fill: false
          },
          { // Year Targets (bars appended to the RIGHT)
            type: 'bar',
            label: 'Year Target',
            data: [],
            backgroundColor: '#7a7a7a',
            borderColor: '#7a7a7a',
            borderWidth: 1
          }
        ]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
layout: { padding: { top: 16 } },   // was { top: 14, bottom: 66 }

        // NO grid, NO Y axis labels
        scales: {
          x: { grid: { display: false } },
          y: { display: false, grid: { display: false }, beginAtZero: true }
        },

        plugins: {
          datalabels: false,               // keep the other plugin off for this chart
          showAllValues: {
            formatter: _fmtShort,
            fontSize: 12,
            fontWeight: '700',
            minGap: 20,
            outline: true,

            // per dataset: [Actual(bar), Target(line), Forecast(line)]
            perDataset: [
              { dy: -12, dx: 0, color: '#800080' }, // bar above
              { dy: 12, dx: -6, color: '#7a7a7a' }, // target below & a hair left
              { dy: -18, dx: 8, color: '#fd7e14' }  // forecast higher & a hair right
            ]
          },
          tooltip: { enabled: true }
        }


      }
    });

    function clearChartAndTable() {
      // chart
      kpiChart.data.labels = [];
      for (const ds of kpiChart.data.datasets) ds.data = [];
      kpiChart.update();

      // table
      tableBody.innerHTML = '<tr class="placeholder-row"><td colspan="7" class="text-center text-muted">—</td></tr>';
    }

    function clearMeta() {
      metaOwner.textContent = '—';
      metaEditor.textContent = '—';
      metaFrequency.textContent = '—';
      metaUnit.textContent = '—';
      metaPriority.textContent = '—';
      metaStatus.textContent = '—';
      metaStatus.className = 'status-pill';
      metaStatus.style.background = '';
    }

    async function loadKpiSummary() {
      clearMeta();
      clearChartAndTable();

      const kpiId = selKpi.value;
      if (!kpiId) return;

      const res = await api('@Url.Action("GetKpiSummary", "Home")?kpiId=' + encodeURIComponent(kpiId));

      // NEW: ACL state from server
      currentPlanId = res?.meta?.planId ?? null;
      canEditFacts = !!res?.meta?.canEdit;

      // ---- title above chart ----
      const leftParts = [];
      if (res?.meta?.pillarCode) leftParts.push(res.meta.pillarCode);
      if (res?.meta?.objectiveCode) leftParts.push(res.meta.objectiveCode);

      let left = leftParts.join('.');
      if (res?.meta?.code) {
        left = left ? `${left} ${res.meta.code}` : res.meta.code;
      }

      const finalTitle = (left ? `${left} — ` : '') + (res?.meta?.title || '—');
      $('kpiTitle').textContent = finalTitle;

      // ---- meta ----
      metaOwner.textContent = res?.meta?.owner || '—';
      metaEditor.textContent = res?.meta?.editor || '—';
      metaFrequency.textContent = res?.meta?.valueType || '—';
      metaUnit.textContent = res?.meta?.unit || '—';
      metaPriority.textContent = (res?.meta?.priority ?? '—');

      const label = (res?.meta?.statusLabel || '—');
      const color = (res?.meta?.statusColor || '');
      metaStatus.textContent = label;
      metaStatus.className = 'status-pill';
      if (color) metaStatus.style.background = color;

      // ---- series ----
      const baseLabels = res?.chart?.labels || [];
      const actual = res?.chart?.actual || [];
      const target = res?.chart?.target || [];
      const forecast = res?.chart?.forecast || [];

      // ---- five-year targets to the RIGHT as bars ----
      const yrArr = Array.isArray(res?.chart?.yearTargets) ? res.chart.yearTargets : []; // [{year, value}]
      const yearLabels = yrArr.map(y => String(y.year));
      const yearBarVals = yrArr.map(y => y.value ?? null);

      const allLabels = baseLabels.concat(yearLabels);
      const pad = new Array(yearLabels.length).fill(null);
      const leftNulls = new Array(baseLabels.length).fill(null);

      kpiChart.data.labels = allLabels;
      kpiChart.data.datasets[0].data = actual.concat(pad);            // Actual
      kpiChart.data.datasets[1].data = target.concat(pad);            // Target
      kpiChart.data.datasets[2].data = forecast.concat(pad);          // Forecast
      kpiChart.data.datasets[3].data = leftNulls.concat(yearBarVals); // Year Targets

      kpiChart.update();

      // ---- table under chart ----
      const rows = res?.table || [];
      if (rows.length === 0) {
        tableBody.innerHTML = '<tr><td colspan="7" class="text-center text-muted">No facts for this plan/year.</td></tr>';
      } else {
        tableBody.innerHTML = '';
        for (const r of rows) {
          const tr = document.createElement('tr');

          // NEW: conditional Edit cell based on ACL
          const editCellHtml = canEditFacts
            ? `<button class="btn btn-sm btn-outline-primary"
                         data-fact-id="${r.id}"
                         data-period="${r.period ?? ''}"
                         data-actual="${r.actual ?? ''}"
                         data-target="${r.target ?? ''}"
                         data-forecast="${r.forecast ?? ''}"
                         data-status="${r.statusCode ?? ''}"
                         data-lastby="${r.lastBy ?? ''}"
                         data-pillar-id="${selPillar.value || ''}"
                         data-objective-id="${selObjective.value || ''}"
                         data-kpi-id="${selKpi.value || ''}"
                         onclick="openEditModal(this)">
                         ✏️ Edit
                       </button>`
            : `<button class="btn btn-sm btn-outline-secondary" data-noaccess="1" title="You do not have access to edit these facts">
                         ✏️ Edit
                       </button>`;

          tr.innerHTML = `
                    <td>${r.period ?? '—'}</td>
                    <td>${r.startDate ?? '—'}</td>
                    <td>${r.endDate ?? '—'}</td>
                    <td>${r.actual ?? '—'}</td>
                    <td>${r.target ?? '—'}</td>
                    <td>${r.forecast ?? '—'}</td>
                    <td>${editCellHtml}</td>
                  `;
          tableBody.appendChild(tr);
        }
      }
    }

    // Friendly alert for users without access
    document.addEventListener('click', function (e) {
      const btn = e.target.closest('[data-noaccess="1"]');
      if (!btn) return;
      e.preventDefault();
      alert('You do not have access to edit these facts.\nOnly the KPI Year Plan Owner/Editor (or an Admin) can edit.');
    });

    // kick things off
    initPage().catch(console.error);
  </script>
}
