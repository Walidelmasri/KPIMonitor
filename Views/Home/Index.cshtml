@{
  ViewData["Title"] = "Dashboard";
}
<style>
  /* Tajawal everywhere for visual match */
  :root { --app-font: 'Tajawal', system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; }
  body, .card, .form-select, .btn { font-family: var(--app-font); }

  /* Make all data cells inherit the row's striped background */
  #factsTbody td { background-color: inherit !important; }

  /* Summary card layout */
  #summaryCard .kpi { display:flex; align-items:center; gap:10px; }
  #summaryCard .kpi .n { font-size:1.6rem; font-weight:800; line-height:1; }
  #summaryCard .kpi .lbl { color:#6c757d; font-weight:600; }

  /* Give the pies a consistent height without reflow jank */
  #summaryPies .pie { min-height:220px; }

  /* Role/segment chips */
  .role-chip{
    display:inline-block;margin:2px 6px 2px 0;padding:4px 8px;border-radius:999px;
    background:#f1f3f5;border:1px solid #e3e7eb;white-space:nowrap;max-width:100%;
    overflow:hidden;text-overflow:ellipsis;cursor:pointer;user-select:none;
    font-family: var(--app-font);
  }
  .role-chip:hover{background:#e9ecef;}
  .role-chip.active{background:#dbeafe;border-color:#93c5fd;color:#0b5ed7;font-weight:600;}
  #roleSummaryCard .role-list{max-height:84px;overflow:auto;}
  #segmentKpiList .role-list{max-height:132px;overflow:auto;}
</style>

<div class="container py-4">
  @section PageHeader {
    <div class="page-hero" style="background-image:url('@Url.Content("~/images/pic1.jpg")')">
      <div class="page-hero-content">
        <h1 class="page-title">Dashboard</h1>
      </div>
    </div>
  }

  <!-- ======= Summary card ======= -->
  <div class="with-rails">
    <div id="summaryCard" class="card shadow-sm rounded-4 mb-4">
      <div class="card-body">
        <div class="d-flex align-items-center justify-content-between mb-3">
          <h6 class="m-0 text-secondary fw-bold">Overall Summary</h6>
          <div class="d-flex align-items-center gap-3">
            <span class="text-muted small" id="summaryUpdated">—</span>
            <span class="text-muted small" id="summaryLoading">Loading…</span>
          </div>
        </div>

        <div class="row g-4" id="summaryPies">
          <div class="col-lg-6">
            <div class="border rounded-3 p-3 h-100">
              <div class="d-flex justify-content-between align-items-center mb-2">
                <div class="fw-bold text-secondary">Indicators by Status</div>
                <div class="d-flex gap-3">
                  <!-- label first, number to the right -->
                  <div class="kpi"><span class="lbl">Target Achieved</span><span class="n ms-1" id="cntGreen">0</span></div>
                  <div class="kpi"><span class="lbl">On Forecast</span><span class="n ms-1" id="cntOrange">0</span></div>
                  <div class="kpi"><span class="lbl">Target Missed</span><span class="n ms-1" id="cntRed">0</span></div>
                  <div class="kpi"><span class="lbl">Data Missing</span><span class="n ms-1" id="cntBlue">0</span></div>
                </div>
              </div>
              <div class="pie">
                <canvas id="pieKpiStatus" aria-label="Indicators by Status" role="img"></canvas>
              </div>
            </div>
          </div>

          <div class="col-lg-6">
            <div class="border rounded-3 p-3 h-100">
              <div class="d-flex justify-content-between align-items-center mb-2">
                <div class="fw-bold text-secondary">Action Plans by Status</div>
                <div class="d-flex gap-3">
                  <!-- label first, number to the right -->
                  <div class="kpi"><span class="lbl">To&nbsp;Do</span><span class="n ms-1" id="cntTodo">0</span></div>
                  <div class="kpi"><span class="lbl">In&nbsp;Progress</span><span class="n ms-1" id="cntProg">0</span></div>
                  <div class="kpi"><span class="lbl">Done</span><span class="n ms-1" id="cntDone">0</span></div>
                </div>
              </div>
              <div class="pie">
                <canvas id="pieActionStatus" aria-label="Actions by Status" role="img"></canvas>
              </div>
            </div>
          </div>
        </div>

        <!-- KPIs from clicked segment -->
        <div id="segmentKpiList" class="mt-3 d-none">
          <div class="d-flex align-items-center justify-content-between mb-1">
            <div class="text-muted small" id="segmentTitle">KPIs</div>
            <button class="btn btn-sm btn-outline-secondary" id="clearSegmentBtn">Clear</button>
          </div>
          <div class="role-list" id="segmentKpiRows"></div>
        </div>

      </div>
    </div>

    <!-- ======= Roles summary card (second) ======= -->
    <div class="card shadow-sm rounded-4 mb-4" id="roleSummaryCard">
      <div class="card-body">
        <div class="d-flex align-items-center justify-content-between mb-1">
          <div class="text-muted small">Your role on indicators</div>
          <span class="badge rounded-pill text-bg-light" id="roleSummaryBadge">—</span>
        </div>
        <div class="row g-3 small" id="roleSummaryRows">
          <div class="col-12 text-muted small" id="roleSummaryPlaceholder">Loading your indicators…</div>
        </div>
      </div>
    </div>

    <!-- ======= Selector row ======= -->
    <div class="card shadow-sm rounded-4 mb-4">
      <div class="card-body">
        <div class="row g-3 align-items-end">
          <div class="col-md-4">
            <label for="pillarSelector" class="form-label">Pillar</label>
            <select id="pillarSelector" class="form-select">
              <option value="">-- Pillar --</option>
            </select>
          </div>
          <div class="col-md-4">
            <label for="objectiveSelector" class="form-label">Objective</label>
            <select id="objectiveSelector" class="form-select" disabled>
              <option value="">-- Objective --</option>
            </select>
          </div>
          <div class="col-md-4">
            <label for="kpiSelector" class="form-label">KPI</label>
            <select id="kpiSelector" class="form-select" disabled>
              <option value="">-- KPI --</option>
            </select>
          </div>
        </div>
      </div>
    </div>

    <!-- ======= Chart + side card ======= -->
    <div class="row mb-5 g-4">
      <div class="col-md-9">
        <div class="bg-white border rounded shadow-sm p-3" style="height: 550px;">
          <h6 id="kpiTitle" class="text-center text-secondary mb-2">KPI Title</h6>
          <canvas id="kpiChart" aria-label="KPI Chart" role="img"></canvas>
        </div>
      </div>

      <div class="col-md-3 d-flex">
        <div class="card shadow-sm rounded-3 w-100 align-self-stretch">
          <div class="card-body d-flex flex-column justify-content-between h-100">
            <div>
              <h6 class="card-title text-secondary fw-bold mb-3">KPI Details</h6>
              <p class="mb-2" style="font-size: larger;"><strong>👁️ Owner:</strong> <span id="metaOwner" class="text-dark">—</span></p>
              <p class="mb-2" style="font-size: larger;"><strong>✍️ Editor:</strong> <span id="metaEditor" class="text-dark">—</span></p>
              <p class="mb-2" style="font-size: larger;"><strong>📅 Frequency:</strong> <span id="metaFrequency" class="text-dark">—</span></p>
              <p class="mb-2" style="font-size: larger;"><strong>🔢 Unit:</strong> <span id="metaUnit" class="text-dark">—</span></p>
            </div>
            <div class="mt-auto">
              <div class="mb-4 text-center">
                <div class="text-muted">Priority</div>
                <div id="metaPriority" class="display-6 fw-bold text-dark">—</div>
              </div>
              <div class="text-center">
                <div class="text-muted mb-1">Status</div>
                <span id="metaStatus" class="status-pill">—</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- KPI-level Edit Button -->
    <div class="d-flex justify-content-between align-items-center mb-2">
      <h6 class="m-0 text-secondary">Facts</h6>
      <button id="openEditKpiBtn" class="btn btn-primary btn-sm" disabled>
        ✏️ Edit KPI (Actual & Forecast)
      </button>
    </div>

    <!-- Data Table -->
    <div class="table-responsive shadow-sm rounded-4 mt-4">
      <table class="table table-striped table-bordered mb-0 align-middle" aria-describedby="dataTableCaption">
        <caption id="dataTableCaption">KPI Facts For the Selected Year Plan</caption>
        <thead class="table-light">
          <tr>
            <th>Period</th>
            <th>Start</th>
            <th>End</th>
            <th>Actual</th>
            <th>Target</th>
            <th>Forecast</th>
          </tr>
        </thead>
        <tbody id="factsTbody">
          <tr>
            <td colspan="6" class="text-center text-muted">—</td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</div>

<!-- Bulk Edit Modal (content loaded via AJAX) -->
<div class="modal fade" id="editKpiModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content"></div>
  </div>
</div>

@section Scripts {
  <!-- Tajawal (if not already in layout) -->
  <link href="https://fonts.googleapis.com/css2?family=Tajawal:wght@400;600;700;800&display=swap" rel="stylesheet">

  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2"></script>
  <script>
    // ---- number formatter FIRST (used by defaults + chart) ----
    function _fmtShort(v) {
      const n = Number(v);
      if (!isFinite(n)) return '';
      const a = Math.abs(n);
      if (a >= 1e9) return (n / 1e9).toFixed(1).replace(/\.0$/, '') + 'B';
      if (a >= 1e6) return (n / 1e6).toFixed(1).replace(/\.0$/, '') + 'M';
      if (a >= 1e3) return (n / 1e3).toFixed(1).replace(/\.0$/, '') + 'K';
      return n.toString();
    }

    // Global chart font -> Tajawal
    Chart.defaults.font.family = 'Tajawal, system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif';
    Chart.defaults.font.size = 12;

    // === SmartValueLabels plugin ===
    const SmartValueLabels = {
      id: 'smartValueLabels',
      afterDatasetsDraw(chart, _args, opts) {
        const { ctx, data, chartArea } = chart;
        const o = opts || {};
        const fmt = typeof o.formatter === 'function' ? o.formatter : (v) => String(v);
        const fontSize = o.fontSize || 12;
        const fontWeight = o.fontWeight || '700';
        const minGap = o.minGap || 14;
        const padTop = o.padTop || 4;
        const padBottom = o.padBottom || 4;
        const maxShift = o.maxShift || 40;
        const barDY = (o.barDY != null ? o.barDY : -12);
        const barDYNeg = (o.barDYNeg != null ? o.barDYNeg : 14);
        const lineDY = (o.lineDY != null ? o.lineDY : -12);
        const perDataset = o.perDataset || [];
        const lineStepDefault = o.lineStep || 1;
        const onlyLastForLinesDefault = !!o.onlyLastForLines;

        ctx.save();
        ctx.textAlign = 'center'; ctx.textBaseline = 'bottom';
        ctx.font = `${fontWeight} ${fontSize}px Tajawal, system-ui,-apple-system,Segoe UI,Roboto,Arial`;

        const byIndex = new Map();

        data.datasets.forEach((ds, di) => {
          if (!chart.isDatasetVisible(di)) return;
          const meta = chart.getDatasetMeta(di);
          const type = ds.type || meta.type;
          const isBar = type === 'bar';
          const isLine = type === 'line';
          const per = perDataset[di] || {};
          const step = Number.isInteger(per.step) ? Math.max(1, per.step) : lineStepDefault;

          let lastIdx = null;
          if (isLine && (onlyLastForLinesDefault || per.onlyLast)) {
            for (let i = ds.data.length - 1; i >= 0; i--) {
              const v = ds.data[i]; if (v != null && !Number.isNaN(+v)) { lastIdx = i; break; }
            }
          }

          meta.data.forEach((el, i) => {
            const raw = ds.data[i], val = Number(raw);
            if (raw == null || Number.isNaN(val)) return;
            if (isLine) {
              if ((onlyLastForLinesDefault || per.onlyLast) && i !== lastIdx) return;
              if ((i % step) !== 0) return;
            }

            const { x, y } = el.getProps(['x', 'y'], true);
            let dy = isBar ? (val < 0 ? barDYNeg : barDY) : lineDY;
            if (typeof per.dy === 'number') dy = per.dy;
            const dx = (typeof per.dx === 'number') ? per.dx : 0;

            const text = fmt(val);
            const w = ctx.measureText(text).width;
            const h = fontSize * 1.2;

            const item = {
              x: x + dx, y: y + dy, baseY: y + dy, val, text,
              color: per.color || o.color || '#111', w, h, priority: isBar ? 0 : 1
            };
            const arr = byIndex.get(i); if (arr) arr.push(item); else byIndex.set(i, [item]);
          });
        });

        const topLimitBase = chartArea.top + padTop;
        const botLimit = chartArea.bottom - padBottom;

        byIndex.forEach((items) => {
          const clamp = (it) => {
            const topLimit = topLimitBase + it.h;
            if (it.y < topLimit) it.y = topLimit;
            const low = it.baseY - maxShift, high = it.baseY + maxShift;
            if (it.y < low) it.y = low; if (it.y > high) it.y = high;
            if (it.y > botLimit) it.y = botLimit;
          };

        items.forEach(it => { it.y = it.baseY; clamp(it); });

        let guard = 0;
        while (guard++ < 10) {
          let changed = false;
          for (let i = 0; i < items.length; i++) {
            for (let j = i + 1; j < items.length; j++) {
              const a = items[i], b = items[j];
              const aL = a.x - a.w / 2, aR = a.x + a.w / 2, aT = a.y - a.h, aB = a.y;
              const bL = b.x - b.w / 2, bR = b.x + b.w / 2, bT = b.y - b.h, bB = b.y;
              const overlap = !(aR < bL || aL > bR || aB < bT || aT > bB);
              if (overlap) {
                const hi = (a.val >= b.val) ? a : b, lo = (hi === a) ? b : a;
                hi.y -= minGap; lo.y += Math.min(4, minGap / 2);
                clamp(hi); clamp(lo); changed = true;
              }
            }
          }
          if (!changed) break;
        }

        items.sort((a, b) => a.priority - b.priority);
        items.forEach(it => {
          ctx.fillStyle = it.color;
          if (o.outline) { ctx.lineWidth = 3; ctx.strokeStyle = 'rgba(255,255,255,.95)'; ctx.strokeText(it.text, it.x, it.y); }
          ctx.fillText(it.text, it.x, it.y);
        });
      });

        ctx.restore();
      }
    };
    Chart.register(SmartValueLabels);

    // ---- ChartDataLabels defaults ----
    Chart.register(ChartDataLabels);
    Chart.defaults.set('plugins.datalabels', {
      display: (c) => c.raw != null,
      formatter: (v) => _fmtShort(v),
      anchor: 'end', align: 'end', offset: 2, clamp: true, clip: false,
      color: '#111',
      font: { family: Chart.defaults.font.family, weight: 'bold' }
    });

    // ---------- tiny helpers ----------
    const byId = id => document.getElementById(id);
    function uiStatus(codeOrLabel) {
      const s = String(codeOrLabel || '').trim().toLowerCase();
      switch (s) {
        case 'green': case 'conforme': case 'ok': return 'Target Achieved';
        case 'orange': case 'rattrapage': case 'catching up': return 'On Forecast';
        case 'red': case 'ecart': case 'needs attention': return 'Target Missed';
        case 'blue': case 'attente': case 'data missing': return 'Data Missing';
        default: return '—';
      }
    }
    const api = (path) => {
      const u = new URL(path, window.location.origin);
      u.searchParams.set('_ts', Date.now().toString());
      return fetch(u.toString(), { headers: { 'Accept': 'application/json' }, cache: 'no-store' })
        .then(r => { if (!r.ok) throw new Error('Network error'); return r.json(); });
    };

    // ---------- elements ----------
    const selPillar = byId('pillarSelector');
    const selObjective = byId('objectiveSelector');
    const selKpi = byId('kpiSelector');

    const metaOwner = byId('metaOwner');
    const metaEditor = byId('metaEditor');
    const metaFrequency = byId('metaFrequency');
    const metaUnit = byId('metaUnit');
    const metaPriority = byId('metaPriority');
    const metaStatus = byId('metaStatus');

    const tableBody = byId('factsTbody');
    const btnEditKpi = byId('openEditKpiBtn');

    // NEW: segment chips nodes
    const segWrap = byId('segmentKpiList');
    const segRows = byId('segmentKpiRows');
    const segTitle = byId('segmentTitle');
    byId('clearSegmentBtn').addEventListener('click', ()=>{ segRows.innerHTML=''; segWrap.classList.add('d-none'); });

    // ACL state
    let currentPlanId = null;
    let canEditFacts = false;

    function resetSelect(sel, placeholder) {
      sel.innerHTML = '';
      const opt = document.createElement('option');
      opt.value = ''; opt.textContent = placeholder;
      sel.appendChild(opt);
      sel.disabled = true;
    }

    // ======= SUMMARY CARD =======
    let pieKpis, pieActs, lineTrend;
    async function loadSummary() {
      const loadingEl = document.getElementById('summaryLoading');
      try {
        const data = await api('@Url.Action("GetDashboardSummary", "Home")');

        const k = data?.kpiStatus ?? data?.kpiStatusCounts ?? {};
        const a = data?.actionStatus ?? data?.actionCounts ?? {};

        // counters
        byId('cntGreen').textContent  = k.green  ?? 0;
        byId('cntOrange').textContent = k.orange ?? 0;
        byId('cntRed').textContent    = k.red    ?? 0;
        byId('cntBlue').textContent   = k.blue   ?? 0;

        byId('cntTodo').textContent = a.todo       ?? 0;
        byId('cntProg').textContent = a.inprogress ?? 0;
        byId('cntDone').textContent = a.done       ?? 0;

        byId('summaryUpdated').textContent = data?.updatedAt ? ('Updated ' + data.updatedAt) : '—';
        if (loadingEl) loadingEl.textContent = '';

        // pies
        const kpiVals = [k.green ?? 0, k.orange ?? 0, k.red ?? 0, k.blue ?? 0];
        const actVals = [a.todo ?? 0, a.inprogress ?? 0, a.done ?? 0];

        const kpiCtx = document.getElementById('pieKpiStatus').getContext('2d');
        const actCtx = document.getElementById('pieActionStatus').getContext('2d');
        if (pieKpis) pieKpis.destroy();
        if (pieActs) pieActs.destroy();

        // KPI Status pie with new labels
        pieKpis = new Chart(kpiCtx, {
          type: 'doughnut',
          data: {
            labels: ['Target Achieved','On Forecast','Target Missed','Data Missing'],
            datasets: [{ data: kpiVals, backgroundColor: ['#28a745','#fd7e14','#dc3545','#0d6efd'], borderColor: '#fff', borderWidth: 2 }]
          },
          options: {
            responsive:true, maintainAspectRatio:false, cutout:'62%',
            plugins: {
              legend: { display:true, position:'bottom' },
              tooltip: { enabled:true, callbacks:{ label: (ctx)=> `${ctx.label}: ${ctx.raw}` } },
              datalabels: { display:(c)=> c.raw>0, formatter:(v)=> String(v), color:'#111', font:{ family: Chart.defaults.font.family, weight:'700' } }
            },
            onClick: (evt, _els, chart)=>onPieClick(evt, chart, 'kpi')
          }
        });

        // Action Status pie
        pieActs = new Chart(actCtx, {
          type: 'doughnut',
          data: {
            labels: ['To Do','In Progress','Done'],
            datasets: [{ data: actVals, backgroundColor: ['#6c757d','#ffc107','#198754'], borderColor: '#fff', borderWidth: 2 }]
          },
          options: {
            responsive:true, maintainAspectRatio:false, cutout:'62%',
            plugins: {
              legend: { display:true, position:'bottom' },
              tooltip: { enabled:true, callbacks:{ label: (ctx)=> `${ctx.label}: ${ctx.raw}` } },
              datalabels: { display:(c)=> c.raw>0, formatter:(v)=> String(v), color:'#111', font:{ family: Chart.defaults.font.family, weight:'700' } }
            },
            onClick: (evt, _els, chart)=>onPieClick(evt, chart, 'action')
          }
        });

      } catch {
        if (loadingEl) loadingEl.textContent = 'Could not load summary.';
      }
    }

    // Map a pie label to canonical code used by server
    function mapLabel(kind, label){
      const s = String(label||'').trim().toLowerCase();
      if (kind === 'kpi') {
        if (s === 'target achieved') return 'green';
        if (s === 'on forecast') return 'orange';
        if (s === 'target missed') return 'red';
        if (s === 'data missing') return 'blue';
        return 'unknown';
      } else {
        if (s === 'to do') return 'todo';
        if (s === 'in progress') return 'inprogress';
        if (s === 'done') return 'done';
        return 'other';
      }
    }

    // Handle pie clicks -> fetch KPIs for that segment -> render chips -> click to select
    async function onPieClick(evt, chart, kind){
      const points = chart.getElementsAtEventForMode(evt, 'nearest', { intersect: true }, true);
      if (!points || !points.length) return;
      const idx = points[0].index;
      const label = chart.data.labels[idx];
      const code = mapLabel(kind, label);
      if (!code) return;

      segRows.innerHTML = '<span class="text-muted small ms-1">Loading…</span>';
      segWrap.classList.remove('d-none');
      segTitle.textContent = (kind === 'kpi' ? 'KPIs with status: ' : 'KPIs with actions: ') + label;

      try{
        const url = '@Url.Action("GetKpisForSummarySegment","Home")' + `?kind=${encodeURIComponent(kind)}&code=${encodeURIComponent(code)}`;
        const data = await api(url);
        const items = Array.isArray(data?.items) ? data.items : [];
        if (!items.length){
          segRows.innerHTML = '<span class="text-muted small ms-1">No KPIs found.</span>';
          return;
        }
        segRows.innerHTML = '';
        for (const it of items){
          const chip=document.createElement('span');
          chip.className='role-chip';
          chip.textContent=it.text || String(it.id);
          chip.title = it.text || String(it.id);
          chip.dataset.kpiId = it.id;
          chip.dataset.pillarId = it.pillarId;
          chip.dataset.objectiveId = it.objectiveId;
          segRows.appendChild(chip);
        }
      }catch{
        segRows.innerHTML = '<span class="text-danger small ms-1">Failed to load KPIs.</span>';
      }
    }

    // Clicking segment chips behaves like role chips
    document.getElementById('segmentKpiRows').addEventListener('click', async (e)=>{
      const chip = e.target.closest('.role-chip'); if (!chip) return;
      const pillarId=chip.dataset.pillarId, objectiveId=chip.dataset.objectiveId, kpiId=chip.dataset.kpiId;
      if(!kpiId) return; await selectKpiByIds(pillarId, objectiveId, kpiId);
      // highlight selection
      document.querySelectorAll('#segmentKpiRows .role-chip').forEach(x=>x.classList.remove('active'));
      chip.classList.add('active');
    });

    // ===== Role summary (unchanged logic) =====
    const roleCard = byId('roleSummaryCard');
    const roleBadge = byId('roleSummaryBadge');
    const roleRows = byId('roleSummaryRows');

    function _mkChip(item){
      const s=document.createElement('span');
      s.className='role-chip'; s.title=item.text||String(item.id); s.textContent=item.text||String(item.id);
      if(item.id!=null) s.dataset.kpiId=item.id;
      if(item.pillarId!=null) s.dataset.pillarId=item.pillarId;
      if(item.objectiveId!=null) s.dataset.objectiveId=item.objectiveId;
      return s;
    }
    function renderRoleSummary(data){
      const ed=Array.isArray(data?.editor)?data.editor:[], ow=Array.isArray(data?.owner)?data.owner:[];
      const ph=document.getElementById('roleSummaryPlaceholder'); if(ph) ph.remove();
      if(!ed.length && !ow.length){ roleRows.innerHTML='<div class="col-12 text-muted small">No indicators available.</div>'; roleBadge.textContent='—'; return; }
      roleRows.innerHTML='';
      const makeCol=(title,items)=>{ const col=document.createElement('div'); col.className='col-md-6';
        const h=document.createElement('div'); h.className='fw-bold mb-1'; h.textContent=title;
        const list=document.createElement('div'); list.className='role-list';
        const MAX=12; items.slice(0,MAX).forEach(it=>list.appendChild(_mkChip(it)));
        if(items.length>MAX) list.appendChild(_mkChip({ text:`+${items.length-MAX} more` }));
        col.appendChild(h); col.appendChild(list); return col; };
      if(ed.length) roleRows.appendChild(makeCol('Editor for', ed));
      if(ow.length) roleRows.appendChild(makeCol('Owner for', ow));
      roleBadge.textContent = (ed.length && ow.length) ? 'Editor for • Owner for' : (ed.length ? 'Editor for' : 'Owner for');
      roleCard.classList.remove('d-none');
      markActiveRoleChip(selKpi.value);
    }
    async function loadRoleSummary(){
      try{
        const r=await fetch('@Url.Action("MyKpiRoles", "Home")',{ headers:{ 'Accept':'application/json' }, cache:'no-store' });
        if(!r.ok) throw 0; renderRoleSummary(await r.json());
      }catch{
        const ph=document.getElementById('roleSummaryPlaceholder'); if(ph) ph.textContent='Could not load your indicators.'; roleBadge.textContent='—';
      }
    }
    function waitForOption(selectEl, value, timeout=4000){
      return new Promise((resolve,reject)=>{
        const target=String(value); const t0=performance.now();
        const i=setInterval(()=>{
          const has=Array.from(selectEl.options).some(o=>String(o.value)===target);
          if(has){ clearInterval(i); resolve(); }
          if(performance.now()-t0>timeout){ clearInterval(i); reject(new Error('Option not found: '+target)); }
        },80);
      });
    }
    roleRows.addEventListener('click', async (e)=>{
      const chip=e.target.closest('.role-chip'); if(!chip) return;
      const pillarId=chip.dataset.pillarId, objectiveId=chip.dataset.objectiveId, kpiId=chip.dataset.kpiId;
      if(!kpiId) return; await selectKpiByIds(pillarId, objectiveId, kpiId); markActiveRoleChip(kpiId);
    });
    async function selectKpiByIds(pillarId, objectiveId, kpiId){
      if(pillarId){
        if(!selPillar.options.length || selPillar.disabled){ await loadPillars(); }
        await waitForOption(selPillar, pillarId);
        if(selPillar.value!==String(pillarId)){ selPillar.value=String(pillarId); selPillar.dispatchEvent(new Event('change')); }
      }
      if(objectiveId){
        await waitForOption(selObjective, objectiveId);
        if(selObjective.value!==String(objectiveId)){ selObjective.value=String(objectiveId); selObjective.dispatchEvent(new Event('change')); }
      }
      if(kpiId){
        await waitForOption(selKpi, kpiId);
        if(selKpi.value!==String(kpiId)){ selKpi.value=String(kpiId); selKpi.dispatchEvent(new Event('change')); }
      }
    }
    function markActiveRoleChip(currentKpiId){
      document.querySelectorAll('#roleSummaryRows .role-chip').forEach(el=>{
        el.classList.toggle('active', currentKpiId && (el.dataset.kpiId===String(currentKpiId)));
      });
    }

    // ---------- cascading dropdowns ----------
    async function loadPillars(){
      resetSelect(selPillar,'-- Pillar --'); resetSelect(selObjective,'-- Objective --'); resetSelect(selKpi,'-- KPI --');
      const items = await api('@Url.Action("GetPillars", "Home")');
      for (const it of items){ const o=document.createElement('option'); o.value=it.id; o.textContent=it.name; selPillar.appendChild(o); }
      selPillar.disabled=false;
    }
    selPillar.addEventListener('change', async ()=>{
      resetSelect(selObjective,'-- Objective --'); resetSelect(selKpi,'-- KPI --'); clearMeta(); clearChartAndTable();
      const pid=selPillar.value; if(!pid) return;
      const items=await api('@Url.Action("GetObjectives", "Home")?pillarId='+encodeURIComponent(pid));
      for(const it of items){ const o=document.createElement('option'); o.value=it.id; o.textContent=it.name; selObjective.appendChild(o); }
      selObjective.disabled=items.length===0;
    });
    selObjective.addEventListener('change', async ()=>{
      resetSelect(selKpi,'-- KPI --'); clearMeta(); clearChartAndTable();
      const oid=selObjective.value; if(!oid) return;
      const items=await api('@Url.Action("GetKpis", "Home")?objectiveId='+encodeURIComponent(oid));
      for(const it of items){ const o=document.createElement('option'); o.value=it.id; o.textContent=it.name; selKpi.appendChild(o); }
      selKpi.disabled=items.length===0;
    });
    selKpi.addEventListener('change', ()=>{ loadKpiSummary().catch(console.error); });

    function getQS(name){ const u=new URL(window.location.href); return u.searchParams.get(name); }

    async function initPage(){
      loadSummary();             // non-blocking
      loadRoleSummary();         // non-blocking
      await loadPillars();

      const qP=getQS('pillarId'), qO=getQS('objectiveId'), qK=getQS('kpiId');
      if(qP){ selPillar.value=qP; selPillar.dispatchEvent(new Event('change')); }
      if(qO){ await new Promise(r=>setTimeout(r,150)); selObjective.value=qO; selObjective.dispatchEvent(new Event('change')); }
      if(qK){ await new Promise(r=>setTimeout(r,150)); selKpi.value=qK; selKpi.dispatchEvent(new Event('change')); }
    }

    // ---------- Chart.js (main KPI) ----------
    const ctx = document.getElementById('kpiChart').getContext('2d');
    let kpiChart = new Chart(ctx, {
      data: {
        labels: [],
        datasets: [
          { type: 'bar', label: 'Actual', data: [], backgroundColor: '#800080', borderColor: '#800080', borderWidth: 2, borderSkipped: 'bottom' },
          { type: 'line', label: 'Target', data: [], borderWidth: 2, borderColor: '#7a7a7a', pointBackgroundColor: '#7a7a7a', pointBorderColor: '#7a7a7a', tension: 0.3, fill: false },
          { type: 'line', label: 'Forecast', data: [], borderWidth: 2, borderColor: '#fd7e14', pointBackgroundColor: '#fd7e14', pointBorderColor: '#fd7e14', borderDash: [5, 5], tension: 0.3, fill: false },
          { type: 'bar', label: 'Year Target', data: [], backgroundColor: '#7a7a7a', borderColor: '#7a7a7a', borderWidth: 1 }
        ]
      },
      options: {
        responsive: true, maintainAspectRatio: false,
        layout: { padding: { top: 28, bottom: 8 } },
        scales: {
          x: { grid: { display: false }, ticks: { padding: 8, callback: function (v) { const l = this.getLabelForValue(v); return String(l).replace(/^\s*\d{4}\s*[\-–—]\s*/, ''); } } },
          y: { display: false, grid: { display: false }, beginAtZero: true }
        },
        plugins: {
          datalabels: false,
          smartValueLabels: {
            formatter: _fmtShort, fontSize: 12, fontWeight: '700', minGap: 14, padTop: 12, padBottom: 4, outline: true,
            perDataset: [
              { dy: -12, dx: 0, color: '#800080' }, // Actual
              { dy: 12, dx: -8, color: '#7a7a7a' }, // Target
              { dy: -16, dx: 8, color: '#fd7e14' }, // Forecast
              { dy: -12, dx: 0, color: '#7a7a7a' }  // Year Target
            ]
          },
          tooltip: { enabled: true },
          legend: { position: 'top', labels: { boxWidth: 12, boxHeight: 10, padding: 12, font: { size: 8, weight: '700', family: Chart.defaults.font.family } } }
        }
      }
    });

    function clearChartAndTable() {
      kpiChart.data.labels = []; for (const ds of kpiChart.data.datasets) ds.data = []; kpiChart.update();
      tableBody.innerHTML = '<tr class="placeholder-row"><td colspan="6" class="text-center text-muted">—</td></tr>';
    }
    function clearMeta() {
      metaOwner.textContent='—'; metaEditor.textContent='—'; metaFrequency.textContent='—'; metaUnit.textContent='—';
      metaPriority.textContent='—'; metaStatus.textContent='—'; metaStatus.className='status-pill'; metaStatus.style.background='';
      btnEditKpi.disabled=true; btnEditKpi.textContent='✏️ Edit KPI (Actual & Forecast)';
    }

    function wireKpiModalAjax() {
      const modal = document.getElementById('editKpiModal');
      const form = modal ? modal.querySelector('#kpi-edit-form') : null;
      if (!form || form.dataset.wired === '1') return;
      form.dataset.wired = '1';

      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        const url = form.getAttribute('action');
        const fd = new FormData(form);
        try {
          const res = await fetch(url, { method: 'POST', headers: { 'X-Requested-With': 'XMLHttpRequest', 'Accept': 'application/json' }, body: fd });
          const text = await res.text(); let data = null; try { data = JSON.parse(text); } catch { }
          if (!res.ok) { const msg = (data && data.error) ? data.error : ('Save failed (' + res.status + ')'); throw new Error(msg); }
          if (data && typeof data === 'object') {
            const created = (typeof data.created === 'number') ? data.created : data.createdCount;
            const skipped = (typeof data.skipped === 'number') ? data.skipped : data.skippedCount;
            if (typeof created === 'number') { alert(`Submitted: ${created} change(s)` + (skipped ? `, skipped: ${skipped}` : '')); }
            else if (data.status) { alert(data.status === 'approved' ? 'Saved & auto-approved.' : 'Submitted for approval.'); }
          }
          bootstrap.Modal.getOrCreateInstance(document.getElementById('editKpiModal')).hide();
          if (btnEditKpi) { btnEditKpi.disabled = true; btnEditKpi.textContent = '⏳ Pending approval'; }
          await new Promise(r => setTimeout(r, 350));
          await loadKpiSummary();
        } catch (err) { alert(err?.message || 'Save failed'); }
      });
    }

    async function loadKpiSummary() {
      clearMeta(); clearChartAndTable();
      const kpiId = selKpi.value; if (!kpiId) return;

      const res = await api('@Url.Action("GetKpiSummary", "Home")?kpiId=' + encodeURIComponent(kpiId));

      // ACL state
      currentPlanId = res?.meta?.planId ?? null;
      canEditFacts = !!res?.meta?.canEdit;

      // Title "PC.OC KPICode — Name"
      const leftParts = [];
      if (res?.meta?.pillarCode) leftParts.push(res.meta.pillarCode);
      if (res?.meta?.objectiveCode) leftParts.push(res.meta.objectiveCode);
      let left = leftParts.join('.');
      if (res?.meta?.code) left = left ? `${left} ${res.meta.code}` : res.meta.code;
      byId('kpiTitle').textContent = (left ? `${left} — ` : '') + (res?.meta?.title || '—');

      // Meta
      metaOwner.textContent = res?.meta?.owner || '—';
      metaEditor.textContent = res?.meta?.editor || '—';
      metaFrequency.textContent = res?.meta?.valueType || '—';
      metaUnit.textContent = res?.meta?.unit || '—';
      metaPriority.textContent = (res?.meta?.priority ?? '—');

      const raw = res?.meta?.statusRaw ?? res?.meta?.statusLabel;
      const color = (res?.meta?.statusColor || '');
      metaStatus.textContent = uiStatus(raw);
      metaStatus.className = 'status-pill';
      if (color) metaStatus.style.background = color;

      // Series
      const baseLabels = res?.chart?.labels || [];
      const actual = res?.chart?.actual || [];
      const target = res?.chart?.target || [];
      const forecast = res?.chart?.forecast || [];

      // Five-year targets (bars at the end)
      const yrArr = Array.isArray(res?.chart?.yearTargets) ? res.chart.yearTargets : [];
      const yearLabels = yrArr.map(y => String(y.year));
      const yearBarVals = yrArr.map(y => y.value ?? null);

      const allLabels = baseLabels.concat(yearLabels);
      const pad = new Array(yearLabels.length).fill(null);
      const leftNulls = new Array(baseLabels.length).fill(null);

      kpiChart.data.labels = allLabels;
      kpiChart.data.datasets[0].data = actual.concat(pad);
      kpiChart.data.datasets[1].data = target.concat(pad);
      kpiChart.data.datasets[2].data = forecast.concat(pad);
      kpiChart.data.datasets[3].data = leftNulls.concat(yearBarVals);
      kpiChart.update();

      // Table
      const rows = res?.table || [];
      if (!rows.length) {
        tableBody.innerHTML = '<tr><td colspan="6" class="text-center text-muted">No facts for this plan/year.</td></tr>';
      } else {
        tableBody.innerHTML = '';
        for (const r of rows) {
          const tr = document.createElement('tr');
          tr.innerHTML = `
            <td>${r.period ?? '—'} ${r.hasPending ? '<span class="badge text-bg-warning ms-1">Pending</span>' : ''}</td>
            <td>${r.startDate ?? '—'}</td>
            <td>${r.endDate ?? '—'}</td>
            <td>${r.actual ?? '—'}</td>
            <td>${r.target ?? '—'}</td>
            <td>${r.forecast ?? '—'}</td>`;
          tableBody.appendChild(tr);
        }
      }

      // KPI-level edit button state
      const anyPending = Array.isArray(res?.table) && res.table.some(r => r.hasPending);
      if (!selKpi.value) { btnEditKpi.disabled = true; btnEditKpi.textContent = '✏️ Edit KPI (Actual & Forecast)'; }
      else if (!canEditFacts) { btnEditKpi.disabled = true; btnEditKpi.textContent = '✏️ Edit KPI (no access)'; }
      else if (anyPending) { btnEditKpi.disabled = true; btnEditKpi.textContent = '⏳ Pending approval'; }
      else { btnEditKpi.disabled = false; btnEditKpi.textContent = '✏️ Edit KPI (Actual & Forecast)'; }

      markActiveRoleChip(selKpi.value);
    }

    // Open the bulk-edit modal
    document.getElementById('openEditKpiBtn').addEventListener('click', async () => {
      const kpiId = selKpi.value; if (!kpiId) return;
      const url = '@Url.Action("EditKpiFactsModal", "Home")' + '?kpiId=' + encodeURIComponent(kpiId);
      const modalContent = document.querySelector('#editKpiModal .modal-content');
      modalContent.innerHTML = '<div class="p-4 text-center text-muted">Loading…</div>';
      try {
        const r = await fetch(url, { headers: { 'X-Requested-With': 'XMLHttpRequest' } });
        const text = await r.text();
        if (r.status === 403) throw new Error('You do not have access to edit this KPI.');
        if (!r.ok) { console.error('EditKpiFactsModal failed', r.status, text); throw new Error('Failed to load edit modal. (' + r.status + ')'); }
        modalContent.innerHTML = text; wireKpiModalAjax();
        bootstrap.Modal.getOrCreateInstance(document.getElementById('editKpiModal')).show();
      } catch (e) { alert(e.message || 'Could not open edit modal.'); }
    });

    // kick things off
    initPage().catch(console.error);
  </script>
}
